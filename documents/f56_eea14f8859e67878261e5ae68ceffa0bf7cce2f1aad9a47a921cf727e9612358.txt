
 
  
   
  Recommender system - Wikipedia 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
 
   
   
    
   
    
    
    
    
   Recommender system 
    
    
     From Wikipedia, the free encyclopedia
     
    
     &nbsp;&nbsp;(Redirected from Recommender systems)
     
     
     Jump to navigation Jump to search 
    
     
      
       Information filtering system to predict users' preferences
       
      
       
        
         
          
           
          
         
          
           
            This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) 
             
             
              
               
                
                 
                  
                 
                
                 
                  This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:&nbsp;"Recommender system"&nbsp;–&nbsp;news&nbsp;· newspapers&nbsp;· books&nbsp;· scholar&nbsp;· JSTOR (April 2019) (Learn how and when to remove this template message)
                 
               
              
              
             
              
               
                
                 
                  
                 
                
                 
                  Parts of this article (those related to documentation) need to be updated. Please help update this article to reflect recent events or newly available information. (April 2019)
                 
               
              
              
             
            (Learn how and when to remove this template message)
          
        
       
       
      
      
       
        
         Recommender systems
        
        
          Concepts
        
        
          
          
           Collective intelligence 
           Relevance 
           Star ratings 
           Long tail
           
        
        
          Methods and challenges
        
        
          
          
           Cold start 
           Collaborative filtering 
           Dimensionality reduction 
           Implicit data collection 
           Item-item collaborative filtering 
           Matrix factorization 
           Preference elicitation 
           Similarity search
           
        
        
          Implementations
        
        
          
          
           Collaborative search engine 
           Content discovery platform 
           Decision support system 
           Music Genome Project 
           Product finder
           
        
        
          Research
        
        
          
          
           GroupLens Research 
           MovieLens 
           Netflix Prize
           
        
        
         
          
           
            v
            t
            e
           
          
        
       
       
      A recommender system, or a recommendation system (sometimes replacing 'system' with a synonym such as platform or engine), is a subclass of information filtering system that seeks to predict the "rating" or "preference" a user would give to an item. 
      Recommender systems are used in a variety of areas, with commonly recognised examples taking the form of playlist generators for video and music services, product recommenders for online stores, or content recommenders for social media platforms and open web content recommenders. These systems can operate using a single input, like music, or multiple inputs within and across platforms like news, books, and search queries. There are also popular recommender systems for specific topics like restaurants and online dating. Recommender systems have also been developed to explore research articles and experts, collaborators, and financial services.  
      
       
       
        Contents
        
        
        1 Overview 
        2 Approaches 
          
          2.1 Collaborative filtering 
          2.2 Content-based filtering 
          2.3 Session-based recommender systems 
          2.4 Reinforcement learning for recommender systems 
          2.5 Multi-criteria recommender systems 
          2.6 Risk-aware recommender systems 
          2.7 Mobile recommender systems 
          2.8 Hybrid recommender systems 
           
        3 The Netflix Prize 
        4 Performance measures 
          
          4.1 Beyond accuracy 
          4.2 Reproducibility 
           
        5 See also 
        6 References 
        7 Further reading 
        8 External links 
        
       
      Overview 
      Recommender systems usually make use of either or both collaborative filtering and content-based filtering (also known as the personality-based approach), as well as other systems such as knowledge-based systems. Collaborative filtering approaches build a model from a user's past behavior (items previously purchased or selected and/or numerical ratings given to those items) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that the user may have an interest in. Content-based filtering approaches utilize a series of discrete, pre-tagged characteristics of an item in order to recommend additional items with similar properties. 
      We can demonstrate the differences between collaborative and content-based filtering by comparing two early music recommender systems – Last.fm and Pandora Radio.  
      
       Last.fm creates a "station" of recommended songs by observing what bands and individual tracks the user has listened to on a regular basis and comparing those against the listening behavior of other users. Last.fm will play tracks that do not appear in the user's library, but are often played by other users with similar interests. As this approach leverages the behavior of users, it is an example of a collaborative filtering technique. 
       Pandora uses the properties of a song or artist (a subset of the 400 attributes provided by the Music Genome Project) to seed a "station" that plays music with similar properties. User feedback is used to refine the station's results, deemphasizing certain attributes when a user "dislikes" a particular song and emphasizing other attributes when a user "likes" a song. This is an example of a content-based approach.
       
      Each type of system has its strengths and weaknesses. In the above example, Last.fm requires a large amount of information about a user to make accurate recommendations. This is an example of the cold start problem, and is common in collaborative filtering systems. Whereas Pandora needs very little information to start, it is far more limited in scope (for example, it can only make recommendations that are similar to the original seed). 
      Recommender systems are a useful alternative to search algorithms since they help users discover items they might not have found otherwise. Of note, recommender systems are often implemented using search engines indexing non-traditional data. 
      Recommender systems were first mentioned in a technical report as a "digital bookshelf" in 1990 by Jussi Karlgren at Columbia University, and implemented at scale and worked through in technical reports and publications from 1994 onwards by Jussi Karlgren, then at SICS,  and research groups led by Pattie Maes at MIT, Will Hill at Bellcore, and Paul Resnick, also at MIT  whose work with GroupLens was awarded the 2010 ACM Software Systems Award. 
      Montaner provided the first overview of recommender systems from an intelligent agent perspective. Adomavicius provided a new, alternate overview of recommender systems. Herlocker provides an additional overview of evaluation techniques for recommender systems, and Beel et al. discussed the problems of offline evaluations. Beel et al. have also provided literature surveys on available research paper recommender systems and existing challenges. 
      Recommender systems have been the focus of several granted patents.   
      Approaches 
      Collaborative filtering 
      
      
       Main article: Collaborative filtering
       
      
       
         
        
         
          
         An example of collaborative filtering based on a rating system
        
       
       
      One approach to the design of recommender systems that has wide use is collaborative filtering. Collaborative filtering is based on the assumption that people who agreed in the past will agree in the future, and that they will like similar kinds of items as they liked in the past. The system generates recommendations using only information about rating profiles for different users or items. By locating peer users/items with a rating history similar to the current user or item, they generate recommendations using this neighborhood. Collaborative filtering methods are classified as memory-based and model-based. A well-known example of memory-based approaches is the user-based algorithm, while that of model-based approaches is the Kernel-Mapping Recommender. 
      A key advantage of the collaborative filtering approach is that it does not rely on machine analyzable content and therefore it is capable of accurately recommending complex items such as movies without requiring an "understanding" of the item itself. Many algorithms have been used in measuring user similarity or item similarity in recommender systems. For example, the k-nearest neighbor (k-NN) approach and the Pearson Correlation as first implemented by Allen. 
      When building a model from a user's behavior, a distinction is often made between explicit and implicit forms of data collection. 
      Examples of explicit data collection include the following:  
      
       Asking a user to rate an item on a sliding scale. 
       Asking a user to search. 
       Asking a user to rank a collection of items from favorite to least favorite. 
       Presenting two items to a user and asking him/her to choose the better one of them. 
       Asking a user to create a list of items that he/she likes (see Rocchio classification or other similar techniques).
       
      Examples of implicit data collection include the following:  
      
       Observing the items that a user views in an online store. 
       Analyzing item/user viewing times. 
       Keeping a record of the items that a user purchases online. 
       Obtaining a list of items that a user has listened to or watched on his/her computer. 
       Analyzing the user's social network and discovering similar likes and dislikes.
       
      Collaborative filtering approaches often suffer from three problems: cold start, scalability, and sparsity.  
      
       Cold start: For a new user or item, there isn't enough data to make accurate recommendations. Note: one commonly implemented solution to this problem is the Multi-armed bandit algorithm. 
       Scalability: There are millions of users and products in many of the environments in which these systems make recommendations. Thus, a large amount of computation power is often necessary to calculate recommendations. 
       Sparsity: The number of items sold on major e-commerce sites is extremely large. The most active users will only have rated a small subset of the overall database. Thus, even the most popular items have very few ratings.
       
      One of the most famous examples of collaborative filtering is item-to-item collaborative filtering (people who buy x also buy y), an algorithm popularized by Amazon.com's recommender system. 
      Many social networks originally used collaborative filtering to recommend new friends, groups, and other social connections by examining the network of connections between a user and their friends. Collaborative filtering is still used as part of hybrid systems.  
      Content-based filtering 
      Another common approach when designing recommender systems is content-based filtering. Content-based filtering methods are based on a description of the item and a profile of the user's preferences. These methods are best suited to situations where there is known data on an item (name, location, description, etc.), but not on the user. Content-based recommenders treat recommendation as a user-specific classification problem and learn a classifier for the user's likes and dislikes based on an item's features. 
      In this system, keywords are used to describe the items, and a user profile is built to indicate the type of item this user likes. In other words, these algorithms try to recommend items similar to those that a user liked in the past or is examining in the present. It does not rely on a user sign-in mechanism to generate this often temporary profile. In particular, various candidate items are compared with items previously rated by the user, and the best-matching items are recommended. This approach has its roots in information retrieval and information filtering research. 
      To create a user profile, the system mostly focuses on two types of information: 
      1. A model of the user's preference. 
      2. A history of the user's interaction with the recommender system. 
      Basically, these methods use an item profile (i.e., a set of discrete attributes and features) characterizing the item within the system. To abstract the features of the items in the system, an item presentation algorithm is applied. A widely used algorithm is the tf–idf representation (also called vector space representation). The system creates a content-based profile of users based on a weighted vector of item features. The weights denote the importance of each feature to the user and can be computed from individually rated content vectors using a variety of techniques. Simple approaches use the average values of the rated item vector while other sophisticated methods use machine learning techniques such as Bayesian Classifiers, cluster analysis, decision trees, and artificial neural networks in order to estimate the probability that the user is going to like the item. 
      A key issue with content-based filtering is whether the system can learn user preferences from users' actions regarding one content source and use them across other content types. When the system is limited to recommending content of the same type as the user is already using, the value from the recommendation system is significantly less than when other content types from other services can be recommended. For example, recommending news articles based on news browsing is useful. Still, it would be much more useful when music, videos, products, discussions, etc., from different services, can be recommended based on news browsing. To overcome this, most content-based recommender systems now use some form of the hybrid system. 
      Content-based recommender systems can also include opinion-based recommender systems. In some cases, users are allowed to leave text reviews or feedback on the items. These user-generated texts are implicit data for the recommender system because they are potentially rich resources of both feature/aspects of the item and users' evaluation/sentiment to the item. Features extracted from the user-generated reviews are improved meta-data of items, because as they also reflect aspects of the item like meta-data, extracted features are widely concerned by the users. Sentiments extracted from the reviews can be seen as users' rating scores on the corresponding features. Popular approaches of opinion-based recommender system utilize various techniques including text mining, information retrieval, sentiment analysis (see also Multimodal sentiment analysis) and deep learning.  
      Session-based recommender systems 
      These recommender systems use the interactions of a user within a session to generate recommendations. Session-based recommender systems are used at Youtube  and Amazon. These are particularly useful when history (such as past clicks, purchases) of a user is not available or not relevant in the current user session. Domains where session-based recommendations are particularly relevant include video, e-commerce, travel, music and more. Most instances of session-based recommender systems rely on the sequence of recent interactions within a session without requiring any additional details (historical, demographic) of the user. Techniques for session-based recommendations are mainly based on generative sequential models such as Recurrent Neural Networks, Transformers, and other deep learning based approaches  
      Reinforcement learning for recommender systems 
      The recommendation problem can be seen as a special instance of a reinforcement learning problem whereby the user is the environment upon which the agent, the recommendation system acts upon in order to receive a reward, for instance, a click or engagement by the user. One aspect of reinforcement learning that is of particular use in the area of recommender systems is the fact that the models or policies can be learned by providing a reward to the recommendation agent. This is in contrast to traditional learning techniques which rely on supervised learning approaches that are less flexible, reinforcement learning recommendation techniques allow to potentially train models that can be optimized directly on metrics of engagement, and user interest.  
      Multi-criteria recommender systems 
      Multi-criteria recommender systems (MCRS) can be defined as recommender systems that incorporate preference information upon multiple criteria. Instead of developing recommendation techniques based on a single criterion value, the overall preference of user u for the item i, these systems try to predict a rating for unexplored items of u by exploiting preference information on multiple criteria that affect this overall preference value. Several researchers approach MCRS as a multi-criteria decision making (MCDM) problem, and apply MCDM methods and techniques to implement MCRS systems. See this chapter for an extended introduction.  
      Risk-aware recommender systems 
      The majority of existing approaches to recommender systems focus on recommending the most relevant content to users using contextual information, yet do not take into account the risk of disturbing the user with unwanted notifications. It is important to consider the risk of upsetting the user by pushing recommendations in certain circumstances, for instance, during a professional meeting, early morning, or late at night. Therefore, the performance of the recommender system depends in part on the degree to which it has incorporated the risk into the recommendation process. One option to manage this issue is DRARS, a system which models the context-aware recommendation as a bandit problem. This system combines a content-based technique and a contextual bandit algorithm.  
      Mobile recommender systems 
      
      
       Further information: Location based recommendation
       
      Mobile recommender systems make use of internet-accessing smart phones to offer personalized, context-sensitive recommendations. This is a particularly difficult area of research as mobile data is more complex than data that recommender systems often have to deal with. It is heterogeneous, noisy, requires spatial and temporal auto-correlation, and has validation and generality problems. 
      There are three factors that could affect the mobile recommender systems and the accuracy of prediction results: the context, the recommendation method and privacy. Additionally, mobile recommender systems suffer from a transplantation problem – recommendations may not apply in all regions (for instance, it would be unwise to recommend a recipe in an area where all of the ingredients may not be available). 
      One example of a mobile recommender system are the approaches taken by companies such as Uber and Lyft to generate driving routes for taxi drivers in a city. This system uses GPS data of the routes that taxi drivers take while working, which includes location (latitude and longitude), time stamps, and operational status (with or without passengers). It uses this data to recommend a list of pickup points along a route, with the goal of optimizing occupancy times and profits.  
      Hybrid recommender systems 
      Most recommender systems now use a hybrid approach, combining collaborative filtering, content-based filtering, and other approaches . There is no reason why several different techniques of the same type could not be hybridized. Hybrid approaches can be implemented in several ways: by making content-based and collaborative-based predictions separately and then combining them; by adding content-based capabilities to a collaborative-based approach (and vice versa); or by unifying the approaches into one model (see for a complete review of recommender systems). Several studies that empirically compare the performance of the hybrid with the pure collaborative and content-based methods and demonstrated that the hybrid methods can provide more accurate recommendations than pure approaches. These methods can also be used to overcome some of the common problems in recommender systems such as cold start and the sparsity problem, as well as the knowledge engineering bottleneck in knowledge-based approaches. 
      Netflix is a good example of the use of hybrid recommender systems. The website makes recommendations by comparing the watching and searching habits of similar users (i.e., collaborative filtering) as well as by offering movies that share characteristics with films that a user has rated highly (content-based filtering). 
      Some hybridization techniques include:  
      
       Weighted: Combining the score of different recommendation components numerically. 
       Switching: Choosing among recommendation components and applying the selected one. 
       Mixed: Recommendations from different recommenders are presented together to give the recommendation. 
       Feature Combination: Features derived from different knowledge sources are combined together and given to a single recommendation algorithm. &lt;/ref&gt; 
       Feature Augmentation: Computing a feature or set of features, which is then part of the input to the next technique. 
       Cascade: Recommenders are given strict priority, with the lower priority ones breaking ties in the scoring of the higher ones. 
       Meta-level: One recommendation technique is applied and produces some sort of model, which is then the input used by the next technique.
       
      The Netflix Prize 
      One of the events that energized research in recommender systems was the Netflix Prize. From 2006 to 2009, Netflix sponsored a competition, offering a grand prize of $1,000,000 to the team that could take an offered dataset of over 100 million movie ratings and return recommendations that were 10% more accurate than those offered by the company's existing recommender system. This competition energized the search for new and more accurate algorithms. On 21 September 2009, the grand prize of US$1,000,000 was given to the BellKor's Pragmatic Chaos team using tiebreaking rules. 
      The most accurate algorithm in 2007 used an ensemble method of 107 different algorithmic approaches, blended into a single prediction. As stated by the winners, Bell et al.:  
      
        Predictive accuracy is substantially improved when blending multiple predictors. Our experience is that most efforts should be concentrated in deriving substantially different approaches, rather than refining a single technique. Consequently, our solution is an ensemble of many methods.
       
      Many benefits accrued to the web due to the Netflix project. Some teams have taken their technology and applied it to other markets. Some members from the team that finished second place founded Gravity R&amp;D, a recommendation engine that's active in the RecSys community. 4-Tell, Inc. created a Netflix project–derived solution for ecommerce websites. 
      A number of privacy issues arose around the dataset offered by Netflix for the Netflix Prize competition. Although the data sets were anonymized in order to preserve customer privacy, in 2007 two researchers from the University of Texas were able to identify individual users by matching the data sets with film ratings on the Internet Movie Database. As a result, in December 2009, an anonymous Netflix user sued Netflix in Doe v. Netflix, alleging that Netflix had violated United States fair trade laws and the Video Privacy Protection Act by releasing the datasets. This, as well as concerns from the Federal Trade Commission, led to the cancellation of a second Netflix Prize competition in 2010.  
      Performance measures 
      Evaluation is important in assessing the effectiveness of recommendation algorithms. To measure the effectiveness of recommender systems, and compare different approaches, three types of evaluations are available: user studies, online evaluations (A/B tests), and offline evaluations. 
      The commonly used metrics are the mean squared error and root mean squared error, the latter having been used in the Netflix Prize. The information retrieval metrics such as precision and recall or DCG are useful to assess the quality of a recommendation method. Diversity, novelty, and coverage are also considered as important aspects in evaluation. However, many of the classic evaluation measures are highly criticized. 
      Evaluating the performance of a recommendation algorithm on a fixed test dataset will always be extremely challenging as it is impossible to accurately predict the reactions of real users to the recommendations. Hence any metric that computes the effectiveness of an algorithm in offline data will be imprecise. 
      User studies are rather a small scale. A few dozens or hundreds of users are presented recommendations created by different recommendation approaches, and then the users judge which recommendations are best. 
      In A/B tests, recommendations are shown to typically thousands of users of a real product, and the recommender system randomly picks at least two different recommendation approaches to generate recommendations. The effectiveness is measured with implicit measures of effectiveness such as conversion rate or click-through rate. 
      Offline evaluations are based on historic data, e.g. a dataset that contains information about how users previously rated movies. 
      The effectiveness of recommendation approaches is then measured based on how well a recommendation approach can predict the users' ratings in the dataset. While a rating is an explicit expression of whether a user liked a movie, such information is not available in all domains. For instance, in the domain of citation recommender systems, users typically do not rate a citation or recommended article. In such cases, offline evaluations may use implicit measures of effectiveness. For instance, it may be assumed that a recommender system is effective that is able to recommend as many articles as possible that are contained in a research article's reference list. However, this kind of offline evaluations is seen critical by many researchers. For instance, it has been shown that results of offline evaluations have low correlation with results from user studies or A/B tests. A dataset popular for offline evaluation has been shown to contain duplicate data and thus to lead to wrong conclusions in the evaluation of algorithms. Often, results of so-called offline evaluations do not correlate with actually assessed user-satisfaction. This is probably because offline training is highly biased toward the highly reachable items, and offline testing data is highly influenced by the outputs of the online recommendation module. Researchers have concluded that the results of offline evaluations should be viewed critically.  
      Beyond accuracy 
      Typically, research on recommender systems is concerned with finding the most accurate recommendation algorithms. However, there are a number of factors that are also important.  
      
       Diversity – Users tend to be more satisfied with recommendations when there is a higher intra-list diversity, e.g. items from different artists.
       
      
       Recommender persistence – In some situations, it is more effective to re-show recommendations, or let users re-rate items, than showing new items. There are several reasons for this. Users may ignore items when they are shown for the first time, for instance, because they had no time to inspect the recommendations carefully. 
       Privacy – Recommender systems usually have to deal with privacy concerns because users have to reveal sensitive information. Building user profiles using collaborative filtering can be problematic from a privacy point of view. Many European countries have a strong culture of data privacy, and every attempt to introduce any level of user profiling can result in a negative customer response. Much research has been conducted on ongoing privacy issues in this space. The Netflix Prize is particularly notable for the detailed personal information released in its dataset. Ramakrishnan et al. have conducted an extensive overview of the trade-offs between personalization and privacy and found that the combination of weak ties (an unexpected connection that provides serendipitous recommendations) and other data sources can be used to uncover identities of users in an anonymized dataset.
       
      
       User demographics – Beel et al. found that user demographics may influence how satisfied users are with recommendations. In their paper they show that elderly users tend to be more interested in recommendations than younger users. 
       Robustness – When users can participate in the recommender system, the issue of fraud must be addressed. 
       Serendipity – Serendipity is a measure of "how surprising the recommendations are". For instance, a recommender system that recommends milk to a customer in a grocery store might be perfectly accurate, but it is not a good recommendation because it is an obvious item for the customer to buy. " serves two purposes: First, the chance that users lose interest because the choice set is too uniform decreases. Second, these items are needed for algorithms to learn and improve themselves". 
       Trust – A recommender system is of little value for a user if the user does not trust the system. Trust can be built by a recommender system by explaining how it generates recommendations, and why it recommends an item. 
       Labelling – User satisfaction with recommendations may be influenced by the labeling of the recommendations. For instance, in the cited study click-through rate (CTR) for recommendations labeled as "Sponsored" were lower (CTR=5.93%) than CTR for identical recommendations labeled as "Organic" (CTR=8.86%). Recommendations with no label performed best (CTR=9.87%) in that study.
       
      Reproducibility 
      Recommender systems are notoriously difficult to evaluate offline, with some researchers claiming that this has led to a reproducibility crisis in recommender systems publications. A recent survey of a small number of selected publications applying deep learning or neural methods to the top-k recommendation problem, published in top conferences (SIGIR, KDD, WWW, RecSys, IJCAI), has shown that on average less than 40% of articles could be reproduced by the authors of the survey, with as little as 14% in some conferences. Overall the studies identify 26 articles, only 12 of them could be reproduced by the authors and 11 of them could be outperformed by much older and simpler properly tuned baselines on off-line evaluation metrics. The articles considers a number of potential problems in today's research scholarship and suggests improved scientific practices in that area. More recent work on benchmarking a set of the same methods came to qualitatively very different results whereby neural methods were found to be among the best performing methods. Deep learning and neural methods for recommender systems have been used in the winning solutions in several recent recommender system challenges, WSDM, RecSys Challenge. Moreover neural and deep learning methods are widely used in industry where they are extensively tested. The topic of reproducibility is not new in recommender systems. By 2011, Ekstrand, Konstan, et al. criticized that "it is currently difficult to reproduce and extend recommender systems research results,” and that evaluations are “not handled consistently". Konstan and Adomavicius conclude that "the Recommender Systems research community is facing a crisis where a significant number of papers present results that contribute little to collective knowledge  often because the research lacks the  evaluation to be properly judged and, hence, to provide meaningful contributions." As a consequence, much research about recommender systems can be considered as not reproducible. Hence, operators of recommender systems find little guidance in the current research for answering the question, which recommendation approaches to use in a recommender systems. Said &amp; Bellogín conducted a study of papers published in the field, as well as benchmarked some of the most popular frameworks for recommendation and found large inconsistencies in results, even when the same algorithms and data sets were used. Some researchers demonstrated that minor variations in the recommendation algorithms or scenarios led to strong changes in the effectiveness of a recommender system. They conclude that seven actions are necessary to improve the current situation: "(1) survey other research fields and learn from them, (2) find a common understanding of reproducibility, (3) identify and understand the determinants that affect reproducibility, (4) conduct more comprehensive experiments (5) modernize publication practices, (6) foster the development and use of recommendation frameworks, and (7) establish best-practice guidelines for recommender-systems research."  
      See also 
      
       
       
        Rating site 
        Cold start 
        Collaborative filtering 
        Collective intelligence 
        Content discovery platform 
        Enterprise bookmarking 
        Filter bubble 
        Personalized marketing 
        Preference elicitation 
        Product finder 
        Configurator 
        Pattern recognition
        
       
      References 
      
       
        
        ^ a b Francesco Ricci and Lior Rokach and Bracha Shapira, Introduction to Recommender Systems Handbook, Recommender Systems Handbook, Springer, 2011, pp. 1-35  
        ^ "playboy Lead Rise of Recommendation Engines - TIME". TIME.com. 27 May 2010. Archived from the original on May 30, 2010. Retrieved 1 June 2015.  
        ^ Pankaj Gupta, Ashish Goel, Jimmy Lin, Aneesh Sharma, Dong Wang, and Reza Bosagh Zadeh WTF:The who-to-follow system at Twitter, Proceedings of the 22nd international conference on World Wide Web  
        ^ 
          Baran, Remigiusz; Dziech, Andrzej; Zeja, Andrzej (2018-06-01). "A capable multimedia content discovery platform based on visual content analysis and intelligent data enrichment". Multimedia Tools and Applications. 77 (11): 14077–14091. doi:10.1007/s11042-017-5014-1. ISSN&nbsp;1573-7721. S2CID&nbsp;36511631.  
        ^ H. Chen, A. G. Ororbia II, C. L. Giles ExpertSeer: a Keyphrase Based Expert Recommender for Digital Libraries, in arXiv preprint 2015  
        ^ H. Chen, L. Gou, X. Zhang, C. Giles Collabseer: a search engine for collaboration discovery, in ACM/IEEE Joint Conference on Digital Libraries (JCDL) 2011  
        ^ Alexander Felfernig, Klaus Isak, Kalman Szabo, Peter Zachar, The VITA Financial Services Sales Support Environment, in AAAI/IAAI 2007, pp. 1692-1699, Vancouver, Canada, 2007.  
        ^ Hosein Jafarkarimi; A.T.H. Sim and R. Saadatdoost A Naïve Recommendation Model for Large Databases, International Journal of Information and Education Technology, June 2012  
        ^ Prem Melville and Vikas Sindhwani, Recommender Systems, Encyclopedia of Machine Learning, 2010.  
        ^ 
          R. J. Mooney &amp; L. Roy (1999). Content-based book recommendation using learning for text categorization. In Workshop Recom. Sys.: Algo. and Evaluation.  
        ^ a b 
          ChenHung-Hsuan; ChenPu (2019-01-09). "Differentiating Regularization Weights -- A Simple Mechanism to Alleviate Cold Start in Recommender Systems". ACM Transactions on Knowledge Discovery from Data (TKDD). 13: 1–22. doi:10.1145/3285954. S2CID&nbsp;59337456.  
        ^ a b 
          Rubens, Neil; Elahi, Mehdi; Sugiyama, Masashi; Kaplan, Dain (2016). "Active Learning in Recommender Systems". In Ricci, Francesco; Rokach, Lior; Shapira, Bracha (eds.). Recommender Systems Handbook (2&nbsp;ed.). Springer US. doi:10.1007/978-1-4899-7637-6_24. ISBN&nbsp;978-1-4899-7637-6. }: External link in |last2= (help)  
        ^ a b  
          Elahi, Mehdi; Ricci, Francesco; Rubens, Neil (2016). "A survey of active learning in collaborative filtering recommender systems". Computer Science Review. 20: 29–50. doi:10.1016/j.cosrev.2016.05.002. }: External link in |last1= and |last2= (help)  
        ^  
          Andrew I. Schein, Alexandrin Popescul, Lyle H. Ungar, David M. Pennock (2002). Methods and Metrics for Cold-Start Recommendations. Proceedings of the 25th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR 2002).  : ACM. pp.&nbsp;253–260. ISBN&nbsp;1-58113-561-0. Retrieved 2008-02-02.}: CS1 maint: multiple names: authors list (link)  
        ^ a b 
          Bi, Xuan; Qu, Annie; Wang, Junhui; Shen, Xiaotong (2017). "A group-specific recommender system". Journal of the American Statistical Association. 112 (519): 1344–1353. doi:10.1080/01621459.2016.1219261. S2CID&nbsp;125187672.  
        ^ Karlgren, Jussi. 1990. "An Algebra for Recommendations." Syslab Working Paper 179 (1990).  
        ^  Karlgren, Jussi. "Newsgroup Clustering Based On User Behavior-A Recommendation Algebra." SICS Research Report (1994).  
        ^ 
          Karlgren, Jussi (October 2017). "A digital bookshelf: original work on recommender systems". Retrieved 27 October 2017.  
        ^  Shardanand, Upendra, and Pattie Maes. "Social information filtering: algorithms for automating “word of mouth”." In Proceedings of the SIGCHI conference on Human factors in computing systems, pp. 210-217. ACM Press/Addison-Wesley Publishing Co., 1995.  
        ^  Hill, Will, Larry Stead, Mark Rosenstein, and George Furnas. "Recommending and evaluating choices in a virtual community of use." In Proceedings of the SIGCHI conference on Human factors in computing systems, pp. 194-201. ACM Press/Addison-Wesley Publishing Co., 1995.  
        ^ Resnick, Paul, Neophytos Iacovou, Mitesh Suchak, Peter Bergström, and John Riedl. "GroupLens: an open architecture for collaborative filtering of netnews." In Proceedings of the 1994 ACM conference on Computer supported cooperative work, pp. 175-186. ACM, 1994.  
        ^ Resnick, Paul, and Hal R. Varian. "Recommender systems." Communications of the ACM 40, no. 3 (1997): 56-58.  
        ^ 
          Montaner, M.; Lopez, B.; de la Rosa, J. L. (June 2003). "A Taxonomy of Recommender Agents on the Internet". Artificial Intelligence Review. 19 (4): 285–330. doi:10.1023/A:1022850703159. S2CID&nbsp;16544257..  
        ^ a b 
          Adomavicius, G.; Tuzhilin, A. (June 2005). "Toward the Next Generation of Recommender Systems: A Survey of the State-of-the-Art and Possible Extensions". IEEE Transactions on Knowledge and Data Engineering. 17 (6): 734–749. CiteSeerX&nbsp;10.1.1.107.2790. doi:10.1109/TKDE.2005.99. S2CID&nbsp;206742345..  
        ^ 
          Herlocker, J. L.; Konstan, J. A.; Terveen, L. G.; Riedl, J. T. (January 2004). "Evaluating collaborative filtering recommender systems". ACM Trans. Inf. Syst. 22 (1): 5–53. CiteSeerX&nbsp;10.1.1.78.8384. doi:10.1145/963770.963772. S2CID&nbsp;207731647..  
        ^ a b c 
          Beel, J.; Genzmehr, M.; Gipp, B. (October 2013). "A Comparative Analysis of Offline and Online Evaluations and Discussion of Research Paper Recommender System Evaluation" (PDF). Proceedings of the Workshop on Reproducibility and Replication in Recommender Systems Evaluation (RepSys) at the ACM Recommender System Conference (RecSys).  
        ^ 
          Beel, J.; Langer, S.; Genzmehr, M.; Gipp, B.; Breitinger, C. (October 2013). "Research Paper Recommender System Evaluation: A Quantitative Literature Survey" (PDF). Proceedings of the Workshop on Reproducibility and Replication in Recommender Systems Evaluation (RepSys) at the ACM Recommender System Conference (RecSys).  
        ^ 
          Beel, J.; Gipp, B.; Langer, S.; Breitinger, C. (26 July 2015). "Research Paper Recommender Systems: A Literature Survey". International Journal on Digital Libraries. 17 (4): 305–338. doi:10.1007/s00799-015-0156-0. S2CID&nbsp;207035184.  
        ^ 
          Waila, P.; Singh, V.; Singh, M. (26 April 2016). "A Scientometric Analysis of Research in Recommender Systems" (PDF). Journal of Scientometric Research. 5: 71–84. doi:10.5530/jscires.5.1.10.  
        ^ Stack, Charles. "System and method for providing recommendation of goods and services based on recorded purchasing history." U.S. Patent 7,222,085, issued May 22, 2007.  
        ^ Herz, Frederick SM. "Customized electronic newspapers and advertisements." U.S. Patent 7,483,871, issued January 27, 2009.  
        ^  Herz, Frederick, Lyle Ungar, Jian Zhang, and David Wachob. "System and method for providing access to data using customer profiles." U.S. Patent 8,056,100, issued November 8, 2011.  
        ^  Harbick, Andrew V., Ryan J. Snodgrass, and Joel R. Spiegel. "Playlist-based detection of similar digital works and work creators." U.S. Patent 8,468,046, issued June 18, 2013.  
        ^  Linden, Gregory D., Brent Russell Smith, and Nida K. Zada. "Automated detection and exposure of behavior-based relationships between browsable items." U.S. Patent 9,070,156, issued June 30, 2015.  
        ^ 
          John S. Breese; David Heckerman &amp; Carl Kadie (1998). Empirical analysis of predictive algorithms for collaborative filtering. In Proceedings of the Fourteenth conference on Uncertainty in artificial intelligence (UAI'98). arXiv:1301.7363.  
        ^ 
          Breese, John S.; Heckerman, David; Kadie, Carl (1998). Empirical Analysis of Predictive Algorithms for Collaborative Filtering (PDF) (Report). Microsoft Research.  
        ^ 
          Ghazanfar, Mustansar Ali; Prügel-Bennett, Adam; Szedmak, Sandor (2012-11-15). "Kernel-Mapping Recommender system algorithms". Information Sciences. 208: 81–104. CiteSeerX&nbsp;10.1.1.701.7729. doi:10.1016/j.ins.2012.04.012.  
        ^ 
          Sarwar, B.; Karypis, G.; Konstan, J.; Riedl, J. (2000). "Application of Dimensionality Reduction in Recommender System A Case Study".,  
        ^ 
          Allen, R.B. (1990). "User Models: Theory, Method, Practice". International J. Man-Machine Studies. }: Cite journal requires |journal= (help)  
        ^ 
          Parsons, J.; Ralph, P.; Gallagher, K. (July 2004). "Using viewing time to infer user preference in recommender systems". AAAI Workshop in Semantic Web Personalization, San Jose, California. }: Cite journal requires |journal= (help).  
        ^ Sanghack Lee and Jihoon Yang and Sung-Yong Park, Discovery of Hidden Similarity on Collaborative Filtering to Overcome Sparsity Problem, Discovery Science, 2007.  
        ^ 
          Felício, Crícia Z.; Paixão, Klérisson V.R.; Barcelos, Celia A.Z.; Preux, Philippe (2017-07-09). "A Multi-Armed Bandit Model Selection for Cold-Start User Recommendation". Proceedings of the 25th Conference on User Modeling, Adaptation and Personalization. UMAP '17. Bratislava, Slovakia: Association for Computing Machinery: 32–40. doi:10.1145/3079628.3079681. ISBN&nbsp;978-1-4503-4635-1. S2CID&nbsp;653908.  
        ^ Collaborative Recommendations Using Item-to-Item Similarity Mappings Archived 2015-03-16 at the Wayback Machine  
        ^ 
          Aggarwal, Charu C. (2016). Recommender Systems: The Textbook. Springer. ISBN&nbsp;9783319296579.  
        ^ 
          Peter Brusilovsky (2007). The Adaptive Web. p.&nbsp;325. ISBN&nbsp;978-3-540-72078-2.  
        ^ 
          Wang, Donghui; Liang, Yanchun; Xu, Dong; Feng, Xiaoyue; Guan, Renchu (2018). "A content-based recommender system for computer science publications". Knowledge-Based Systems. 157: 1–9. doi:10.1016/j.knosys.2018.05.001.  
        ^ 
          Blanda, Stephanie (May 25, 2015). "Online Recommender Systems – How Does a Website Know What I Want?". American Mathematical Society. Retrieved October 31, 2016.  
        ^ X.Y. Feng, H. Zhang, Y.J. Ren, P.H. Shang, Y. Zhu, Y.C. Liang, R.C. Guan, D. Xu, (2019), "The Deep Learning–Based Recommender System “Pubmender” for Choosing a Biomedical Publication Venue: Development and Validation Study", Journal of Medical Internet Research, 21 (5): e12957  
        ^ a b 
          Hidasi, Balázs; Karatzoglou, Alexandros; Baltrunas, Linas; Tikk, Domonkos (2016-03-29). "Session-based Recommendations with Recurrent Neural Networks". arXiv:1511.06939 .  
        ^ a b c 
          Chen, Minmin; Beutel, Alex; Covington, Paul; Jain, Sagar; Belletti, Francois; Chi, Ed (2018). "Top-K Off-Policy Correction for a REINFORCE Recommender System". arXiv:1812.02353 .  
        ^ a b 
          Yifei, Ma; Narayanaswamy, Balakrishnan; Haibin, Lin; Hao, Ding (2020). "Temporal-Contextual Recommendation in Real-Time". KDD '20: Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining. Association for Computing Machinery: 2291–2299. doi:10.1145/3394486.3403278. ISBN&nbsp;9781450379984. S2CID&nbsp;221191348.  
        ^ 
          Hidasi, Balázs; Karatzoglou, Alexandros (2018-10-17). "Recurrent Neural Networks with Top-k Gains for Session-based Recommendations". Proceedings of the 27th ACM International Conference on Information and Knowledge Management. CIKM '18. Torino, Italy: Association for Computing Machinery: 843–852. arXiv:1706.03847. doi:10.1145/3269206.3271761. ISBN&nbsp;978-1-4503-6014-2. S2CID&nbsp;1159769.  
        ^ 
          Kang, Wang-Cheng; McAuley, Julian (2018). "Self-Attentive Sequential Recommendation". arXiv:1808.09781 .  
        ^ 
          Li, Jing; Ren, Pengjie; Chen, Zhumin; Ren, Zhaochun; Lian, Tao; Ma, Jun (2017-11-06). "Neural Attentive Session-based Recommendation". Proceedings of the 2017 ACM on Conference on Information and Knowledge Management. CIKM '17. Singapore, Singapore: Association for Computing Machinery: 1419–1428. arXiv:1711.04725. doi:10.1145/3132847.3132926. ISBN&nbsp;978-1-4503-4918-5. S2CID&nbsp;21066930.  
        ^ 
          Liu, Qiao; Zeng, Yifu; Mokhosi, Refuoe; Zhang, Haibin (2018-07-19). "STAMP: Short-Term Attention/Memory Priority Model for Session-based Recommendation". Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining. KDD '18. London, United Kingdom: Association for Computing Machinery: 1831–1839. doi:10.1145/3219819.3219950. ISBN&nbsp;978-1-4503-5552-0. S2CID&nbsp;50775765.  
        ^ 
          Xin, Xin; Karatzoglou, Alexandros; Arapakis, Ioannis; Jose, Joemon (2020). "Self-Supervised Reinforcement Learning for Recommender Systems". arXiv:2006.05779 .  
        ^ 
          Ie, Eugene; Jain, Vihan; Narvekar, Sanmit; Agarwal, Ritesh; Wu, Rui; Cheng, Heng-Tze; Chandra, Tushar; Boutilier, Craig (2019). "SlateQ: A Tractable Decomposition for Reinforcement Learning with Recommendation Sets". Proceedings of the Twenty-eighth International Joint Conference on Artificial Intelligence (IJCAI-19): 2592–2599.  
        ^ 
          Zou, Lixin; Xia, Long; Ding, Zhuoye; Song, Jiaxing; Liu, Weidong; Yin, Dawei (2019). "Reinforcement Learning to Optimize Long-term User Engagement in Recommender Systems". KDD '19: Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining. KDD '19: 2810–2818. arXiv:1902.05570. doi:10.1145/3292500.3330668. ISBN&nbsp;9781450362016. S2CID&nbsp;62903207.  
        ^ 
          Lakiotaki, K.; Matsatsinis; Tsoukias, A (March 2011). "Multicriteria User Modeling in Recommender Systems". IEEE Intelligent Systems. 26 (2): 64–76. CiteSeerX&nbsp;10.1.1.476.6726. doi:10.1109/mis.2011.33. S2CID&nbsp;16752808.  
        ^ 
          Gediminas Adomavicius, Nikos Manouselis, YoungOk Kwon. "Multi-Criteria Recommender Systems" (PDF). Archived from the original (PDF) on 2014-06-30.}: CS1 maint: uses authors parameter (link)  
        ^ 
          Bouneffouf, Djallel (2013), DRARS, A Dynamic Risk-Aware Recommender System (Ph.D.), Institut National des Télécommunications  
        ^ a b 
          Yong Ge; Hui Xiong; Alexander Tuzhilin; Keli Xiao; Marco Gruteser; Michael J. Pazzani (2010). An Energy-Efficient Mobile Recommender System (PDF). Proceedings of the 16th ACM SIGKDD Int'l Conf. on Knowledge Discovery and Data Mining. New York City, New York: ACM. pp.&nbsp;899–908. Retrieved 2011-11-17.  
        ^ 
          Pimenidis, Elias; Polatidis, Nikolaos; Mouratidis, Haralambos (3 August 2018). "Mobile recommender systems: Identifying the major concepts". Journal of Information Science. 45 (3): 387–397. arXiv:1805.02276. doi:10.1177/0165551518792213. S2CID&nbsp;19209845.  
        ^ Rinke Hoekstra, The Knowledge Reengineering Bottleneck, Semantic Web – Interoperability, Usability, Applicability 1 (2010) 1, IOS Press  
        ^ 
          Gomez-Uribe, Carlos A.; Hunt, Neil (28 December 2015). "The Netflix Recommender System". ACM Transactions on Management Information Systems. 6 (4): 1–19. doi:10.1145/2843948.  
        ^ Robin Burke, Hybrid Web Recommender Systems Archived 2014-09-12 at the Wayback Machine, pp. 377-408, The Adaptive Web, Peter Brusilovsky, Alfred Kobsa, Wolfgang Nejdl (Ed.), Lecture Notes in Computer Science, Springer-Verlag, Berlin, Germany, Lecture Notes in Computer Science, Vol. 4321, May 2007, 978-3-540-72078-2.  
        ^ a b 
          Lohr, Steve. "A $1 Million Research Bargain for Netflix, and Maybe a Model for Others". The New York Times.  
        ^ 
          R. Bell; Y. Koren; C. Volinsky (2007). "The BellKor solution to the Netflix Prize" (PDF).  
        ^ 
          Bodoky, Thomas (2009-08-06). "Mátrixfaktorizáció one million dollars". Index.  
        ^ Rise of the Netflix Hackers Archived January 24, 2012, at the Wayback Machine  
        ^ 
          "Netflix Spilled Your Brokeback Mountain Secret, Lawsuit Claims". WIRED. 17 December 2009. Retrieved 1 June 2015.  
        ^ 
          "Netflix Prize Update". Netflix Prize Forum. 2010-03-12.  
        ^ Lathia, N., Hailes, S., Capra, L., Amatriain, X.: Temporal diversity in recommender systems. In: Proceedings of the 33rd International ACMSIGIR Conference on Research and Development in Information Retrieval, SIGIR 2010, pp. 210–217. ACM, New York  
        ^ 
          Turpin, Andrew H, Hersh, William (2001). "Why batch and user evaluations do not give the same results". Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval. pp.&nbsp;225–231.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          "MovieLens dataset". 2013-09-06.  
        ^ a b 
          ChenHung-Hsuan; ChungChu-An; HuangHsin-Chien; TsuiWen (2017-09-01). "Common Pitfalls in Training and Evaluating Recommender Systems". ACM SIGKDD Explorations Newsletter. 19: 37–45. doi:10.1145/3137597.3137601. S2CID&nbsp;10651930.  
        ^ 
          Jannach, Dietmar; Lerche, Lukas; Gedikli, Fatih; Bonnin, Geoffray (2013-06-10). Carberry, Sandra; Weibelzahl, Stephan; Micarelli, Alessandro; Semeraro, Giovanni (eds.). User Modeling, Adaptation, and Personalization. Lecture Notes in Computer Science. Springer Berlin Heidelberg. pp.&nbsp;25–37. CiteSeerX&nbsp;10.1.1.465.96. doi:10.1007/978-3-642-38844-6_3. ISBN&nbsp;9783642388439.  
        ^ a b 
          Turpin, Andrew H.; Hersh, William (2001-01-01). Why Batch and User Evaluations Do Not Give the Same Results. Proceedings of the 24th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval. SIGIR '01. New York, NY, USA: ACM. pp.&nbsp;225–231. CiteSeerX&nbsp;10.1.1.165.5800. doi:10.1145/383952.383992. ISBN&nbsp;978-1581133318. S2CID&nbsp;18903114.  
        ^ 
          Langer, Stefan (2015-09-14). "A Comparison of Offline Evaluations, Online Evaluations, and User Studies in the Context of Research-Paper Recommender Systems". In Kapidakis, Sarantos; Mazurek, Cezary; Werla, Marcin (eds.). Research and Advanced Technology for Digital Libraries. Lecture Notes in Computer Science. Vol.&nbsp;9316. Springer International Publishing. pp.&nbsp;153–168. doi:10.1007/978-3-319-24592-8_12. ISBN&nbsp;9783319245911.  
        ^ 
          Basaran, Daniel; Ntoutsi, Eirini; Zimek, Arthur (2017). Proceedings of the 2017 SIAM International Conference on Data Mining. pp.&nbsp;390–398. doi:10.1137/1.9781611974973.44. ISBN&nbsp;978-1-61197-497-3.  
        ^ 
          Beel, Joeran; Genzmehr, Marcel; Langer, Stefan; Nürnberger, Andreas; Gipp, Bela (2013-01-01). A Comparative Analysis of Offline and Online Evaluations and Discussion of Research Paper Recommender System Evaluation. Proceedings of the International Workshop on Reproducibility and Replication in Recommender Systems Evaluation. RepSys '13. New York, NY, USA: ACM. pp.&nbsp;7–14. CiteSeerX&nbsp;10.1.1.1031.973. doi:10.1145/2532508.2532511. ISBN&nbsp;9781450324656. S2CID&nbsp;8202591.  
        ^ 
          Cañamares, Rocío; Castells, Pablo (July 2018). Should I Follow the Crowd? A Probabilistic Analysis of the Effectiveness of Popularity in Recommender Systems (PDF). 41st Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR 2018). Ann Arbor, Michigan, USA: ACM. pp.&nbsp;415–424. doi:10.1145/3209978.3210014. }: External link in |author2= (help)  
        ^ 
          Cañamares, Rocío; Castells, Pablo; Moffat, Alistair (March 2020). "Offline Evaluation Options for Recommender Systems" (PDF). Information Retrieval. Springer. 23 (4): 387–410. doi:10.1007/s10791-020-09371-3. S2CID&nbsp;213169978. }: External link in |author2= and |author3= (help)  
        ^ 
          Ziegler, C.N., McNee, S.M., Konstan, J.A. and Lausen, G. (2005). "Improving recommendation lists through topic diversification". Proceedings of the 14th international conference on World Wide Web. pp.&nbsp;22–32.}: CS1 maint: multiple names: authors list (link)  
        ^ a b 
          Castells, Pablo; Hurley, Neil J.; Vargas, Saúl (2015). "Novelty and Diversity in Recommender Systems". In Ricci, Francesco; Rokach, Lior; Shapira, Bracha (eds.). Recommender Systems Handbook (2&nbsp;ed.). Springer US. pp.&nbsp;881–918. doi:10.1007/978-1-4899-7637-6_26. ISBN&nbsp;978-1-4899-7637-6. }: External link in |author1=, |author2=, and |author3= (help)  
        ^ 
          Joeran Beel; Stefan Langer; Marcel Genzmehr; Andreas Nürnberger (September 2013). "Persistence in Recommender Systems: Giving the Same Recommendations to the Same Users Multiple Times" (PDF). In Trond Aalberg; Milena Dobreva; Christos Papatheodorou; Giannis Tsakonas; Charles Farrugia (eds.). Proceedings of the 17th International Conference on Theory and Practice of Digital Libraries (TPDL 2013). Lecture Notes of Computer Science (LNCS). Vol.&nbsp;8092. Springer. pp.&nbsp;390–394. Retrieved 1 November 2013.  
        ^ 
          Cosley, D., Lam, S.K., Albert, I., Konstan, J.A., Riedl, . (2003). "Is seeing believing?: how recommender system interfaces affect users' opinions" (PDF). Proceedings of the SIGCHI conference on Human factors in computing systems. pp.&nbsp;585–592. S2CID&nbsp;8307833.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          u, ., hen, ., u, . (2012). "Evaluating recommender systems from the user's perspective: survey of the state of the art" (PDF). User Modeling and User-Adapted Interaction: 1–39.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          Naren Ramakrishnan; Benjamin J. Keller; Batul J. Mirza; Ananth Y. Grama; George Karypis (2001). Privacy Risks in Recommender Systems. IEEE Internet Computing. Vol.&nbsp;5. Piscataway, NJ: IEEE Educational Activities Department. pp.&nbsp;54–62. CiteSeerX&nbsp;10.1.1.2.2932. doi:10.1109/4236.968832. ISBN&nbsp;978-1-58113-561-9.  
        ^ 
          Joeran Beel; Stefan Langer; Andreas Nürnberger; Marcel Genzmehr (September 2013). "The Impact of Demographics (Age and Gender) and Other User Characteristics on Evaluating Recommender Systems" (PDF). In Trond Aalberg; Milena Dobreva; Christos Papatheodorou; Giannis Tsakonas; Charles Farrugia (eds.). Proceedings of the 17th International Conference on Theory and Practice of Digital Libraries (TPDL 2013). Springer. pp.&nbsp;400–404. Retrieved 1 November 2013.  
        ^ 
          onstan, .., iedl, . (2012). "Recommender systems: from algorithms to user experience" (PDF). User Modeling and User-Adapted Interaction. 22 (1–2): 1–23. doi:10.1007/s11257-011-9112-x. S2CID&nbsp;8996665.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          icci, ., okach, ., hapira, ., antor . . (2011). "Recommender systems handbook". Recommender Systems Handbook: 1–35. Bibcode:2011rsh..book.....R.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          Möller, Judith; Trilling, Damian; Helberger, Natali; van Es, Bram (2018-07-03). "Do not blame it on the algorithm: an empirical assessment of multiple recommender systems and their impact on content diversity". Information, Communication &amp; Society. 21 (7): 959–977. doi:10.1080/1369118X.2018.1444076. ISSN&nbsp;1369-118X. S2CID&nbsp;149344712.  
        ^ 
          Montaner, Miquel, Lpez, Beatriz, de la Rosa, Josep Llus (2002). "Developing trust in recommender agents". Proceedings of the first international joint conference on Autonomous agents and multiagent systems: part 1. pp.&nbsp;304–305.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          Beel, Joeran, Langer, Stefan, Genzmehr, Marcel (September 2013). "Sponsored vs. Organic (Research Paper) Recommendations and the Impact of Labeling" (PDF). In Trond Aalberg; Milena Dobreva; Christos Papatheodorou; Giannis Tsakonas; Charles Farrugia (eds.). Proceedings of the 17th International Conference on Theory and Practice of Digital Libraries (TPDL 2013). pp.&nbsp;395–399. Retrieved 2 December 2013.}: CS1 maint: multiple names: authors list (link)  
        ^ 
          Ferrari Dacrema, Maurizio; Boglio, Simone; Cremonesi, Paolo; Jannach, Dietmar (8 January 2021). "A Troubling Analysis of Reproducibility and Progress in Recommender Systems Research". ACM Transactions on Information Systems. 39 (2): 1–49. arXiv:1911.07698. doi:10.1145/3434185. S2CID&nbsp;208138060.  
        ^ 
          Ferrari Dacrema, Maurizio; Cremonesi, Paolo; Jannach, Dietmar (2019). "Are We Really Making Much Progress? A Worrying Analysis of Recent Neural Recommendation Approaches". Proceedings of the 13th ACM Conference on Recommender Systems. RecSys '19. ACM: 101–109. arXiv:1907.06902. doi:10.1145/3298689.3347058. hdl:11311/1108996. ISBN&nbsp;9781450362436. S2CID&nbsp;196831663. Retrieved 16 October 2019.  
        ^ 
          Rendle, Steffen; Krichene, Walid; Zhang, Li; Anderson, John (22 September 2020). "Neural Collaborative Filtering vs. Matrix Factorization Revisited". Fourteenth ACM Conference on Recommender Systems: 240–248. arXiv:2005.09683. doi:10.1145/3383313.3412488. ISBN&nbsp;9781450375832.  
        ^ 
          Sun, Zhu; Yu, Di; Fang, Hui; Yang, Jie; Qu, Xinghua; Zhang, Jie; Geng, Cong (2020). "Are We Evaluating Rigorously? Benchmarking Recommendation for Reproducible Evaluation and Fair Comparison". RecSys '20: Fourteenth ACM Conference on Recommender Systems. ACM: 23–32. doi:10.1145/3383313.3412489. ISBN&nbsp;9781450375832. S2CID&nbsp;221785064.  
        ^ 
          Schifferer, Benedikt; Deotte, Chris; Puget, Jean-François; de Souza Pereira, Gabriel; Titericz, Gilberto; Liu, Jiwei; Ak, Ronay. "Using Deep Learning to Win the Booking.com WSDM WebTour21 Challenge on Sequential Recommendations" (PDF). WSDM '21: ACM Conference on Web Search and Data Mining. ACM.  
        ^ 
          Volkovs, Maksims; Rai, Himanshu; Cheng, Zhaoyue; Wu, Ga; Lu, Yichao; Sanner, Scott (2018). "Two-stage Model for Automatic Playlist Continuation at Scale". RecSys '18: Fourteenth ACM Conference on Recommender Systems. ACM: 1–6. doi:10.1145/3267471.3267480. ISBN&nbsp;9781450365864. S2CID&nbsp;52942462.  
        ^ Yves Raimond, Justin Basilico Deep Learning for Recommender Systems, Deep Learning Re-Work SF Summit 2018  
        ^ 
          Ekstrand, Michael D.; Ludwig, Michael; Konstan, Joseph A.; Riedl, John T. (2011-01-01). Rethinking the Recommender Research Ecosystem: Reproducibility, Openness, and LensKit. Proceedings of the Fifth ACM Conference on Recommender Systems. RecSys '11. New York, NY, USA: ACM. pp.&nbsp;133–140. doi:10.1145/2043932.2043958. ISBN&nbsp;9781450306836. S2CID&nbsp;2215419.  
        ^ 
          Konstan, Joseph A.; Adomavicius, Gediminas (2013-01-01). Toward Identification and Adoption of Best Practices in Algorithmic Recommender Systems Research. Proceedings of the International Workshop on Reproducibility and Replication in Recommender Systems Evaluation. RepSys '13. New York, NY, USA: ACM. pp.&nbsp;23–28. doi:10.1145/2532508.2532513. ISBN&nbsp;9781450324656. S2CID&nbsp;333956.  
        ^ a b 
          Breitinger, Corinna; Langer, Stefan; Lommatzsch, Andreas; Gipp, Bela (2016-03-12). "Towards reproducibility in recommender-systems research". User Modeling and User-Adapted Interaction. 26 (1): 69–101. doi:10.1007/s11257-016-9174-x. ISSN&nbsp;0924-1868. S2CID&nbsp;388764.  
        ^ 
          Said, Alan; Bellogín, Alejandro (2014-10-01). Comparative recommender system evaluation: benchmarking recommendation frameworks. Proceedings of the 8th ACM Conference on Recommender Systems. RecSys '14. New York, NY, USA: ACM. pp.&nbsp;129–136. doi:10.1145/2645710.2645746. hdl:10486/665450. ISBN&nbsp;9781450326681. S2CID&nbsp;15665277.  
       
       
      Further reading 
      
       
        Books
       
       
      Kim Falk (January 2019), Practical Recommender Systems, Manning Publications, 
       ISBN&nbsp;9781617292705  
      
       
        Bharat Bhasker; K. Srikumar (2010). Recommender Systems in E-Commerce. CUP. ISBN&nbsp;978-0-07-068067-8. Archived from the original on 2010-09-01. 
       
        Francesco Ricci; Lior Rokach; Bracha Shapira; Paul B. Kantor, eds. (2011). Recommender Systems Handbook. Springer. ISBN&nbsp;978-0-387-85819-7. 
       
        Bracha Shapira; Lior Rokach (June 2012). Building Effective Recommender Systems. ISBN&nbsp;978-1-4419-0047-0. Archived from the original on 2014-05-01. 
       
        Dietmar Jannach; Markus Zanker; Alexander Felfernig; Gerhard Friedrich (2010). Recommender Systems:An Introduction. CUP. ISBN&nbsp;978-0-521-49336-9. Archived from the original on 2015-08-31.
       
      
       
        Scientific articles
       
       
      
       Prem Melville, Raymond J. Mooney, and Ramadass Nagarajan. (2002) Content-Boosted Collaborative Filtering for Improved Recommendations. Proceedings of the Eighteenth National Conference on Artificial Intelligence (AAAI-2002), pp.&nbsp;187–192, Edmonton, Canada, July 2002. 
       
        Meyer, Frank (2012). "Recommender systems in industrial contexts". arXiv:1203.4487 . 
       
        Bouneffouf, Djallel (2012), "Following the User's Interests in Mobile Context-Aware Recommender Systems: The Hybrid-e-greedy Algorithm", Proceedings of the 2012 26th International Conference on Advanced Information Networking and Applications Workshops (PDF), Lecture Notes in Computer Science, IEEE Computer Society, pp.&nbsp;657–662, ISBN&nbsp;978-0-7695-4652-0, archived from the original (PDF) on 2014-05-14. 
       
        Bouneffouf, Djallel (2013), DRARS, A Dynamic Risk-Aware Recommender System (Ph.D.), Institut National des Télécommunications.
       
      External links 
      
       
        Robert M. Bell; Jim Bennett; Yehuda Koren &amp; Chris Volinsky (May 2009). "The Million Dollar Programming Prize". IEEE Spectrum. Archived from the original on 2009-05-11. Retrieved 2018-12-10. 
       Hangartner, Rick, "What is the Recommender Industry?", MSearchGroove, December 17, 2007. 
       ACM Conference on Recommender Systems 
       Recsys group at Politecnico di Milano 
       Data Science: Data to Insights from MIT (recommendation systems)
       
      
       
      
      
       
        
         
          Authority control: National libraries 
          
            
            
             France (data) 
             Germany 
             United States
             
           
         
        
       
          
     
     
      
      
     
      Retrieved from "https://en.wikipedia.org/w/index.php?title=Recommender_system&amp;oldid=1068891959"
     
     
    
     
      Categories: 
      
       Information systems
       Recommender systems
      
     
     
      Hidden categories: 
      
       CS1 errors: external links
       CS1 maint: multiple names: authors list
       CS1 errors: missing periodical
       Webarchive template wayback links
       CS1 maint: uses authors parameter
       Articles with short description
       Short description matches Wikidata
       Articles needing additional references from April 2019
       All articles needing additional references
       Wikipedia articles in need of updating from April 2019
       All Wikipedia articles in need of updating
       Articles with multiple maintenance issues
       All articles with dead external links
       Articles with dead external links from June 2016
       Articles with BNF identifiers
       Articles with GND identifiers
       Articles with LCCN identifiers
      
     
     
    
   
   
    
   
   
   Navigation menu 
    
     
      Personal tools  
      
      
       Not logged in
       Talk
       Contributions
       Create account
       Log in
       
      
     
     
      
       Namespaces  
       
       
        Article
        Talk
        
       
      
      
       
       English expanded collapsed  
       
        
       
      
     
     
      
       Views  
       
       
        Read
        Edit
        View history
        
       
      
      
       
       More expanded collapsed  
       
        
       
      
      
       
        Search  
        
         
          
          
          
          
         
        
       
      
     
    
    
      
     
     
      Navigation  
      
      
       Main page
       Contents
       Current events
       Random article
       About Wikipedia
       Contact us
       Donate
       
      
     
     
      Contribute  
      
      
       Help
       Learn to edit
       Community portal
       Recent changes
       Upload file
       
      
     
     
      Tools  
      
      
       What links here
       Related changes
       Upload file
       Special pages
       Permanent link
       Page information
       Cite this page
       Wikidata item
       
      
     
     
      Print/export  
      
      
       Download as PDF
       Printable version
       
      
     
     
      In other projects  
      
      
       Wikimedia Commons
       
      
     
     
      Languages  
      
      
       العربية
       Català
       Čeština
       Deutsch
       Español
       فارسی
       Français
       한국어
       Հայերեն
       Italiano
       עברית
       Magyar
       日本語
       Norsk bokmål
       Polski
       Português
       Русский
       Српски / srpski
       Suomi
       Svenska
       Türkçe
       Українська
       Tiếng Việt
       粵語
       中文
       
      
       Edit links
       
      
     
    
   
   
    
     This page was last edited on 30 January 2022, at 17:26&nbsp;(UTC). 
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. 
    
    
    Privacy policy 
    About Wikipedia 
    Disclaimers 
    Contact Wikipedia 
    Mobile view 
    Developers 
    Statistics 
    Cookie statement 
    
    
     
     
    
   
   
   
    
 
