
 
  
   
  Software engineering - Wikipedia 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
 
   
   
    
   
    
    
    
    
   Software engineering 
    
    
     From Wikipedia, the free encyclopedia
     
     
     
     Jump to navigation Jump to search 
    
     
      
       Computing discipline
       
      
      
       
        
         Part of a series on
        
        
         Software development
        
        
          
          
           
            Core activities
           
            
            
             Processes 
             Requirements 
             Design 
             Construction 
             Testing 
             Debugging 
             Deployment 
             Maintenance
            
           
           
        
        
          
          
           
            Paradigms and models
           
            
            
             Software engineering 
             Agile 
             Cleanroom 
             Incremental 
             Prototyping 
             Spiral 
             V model 
             Waterfall
            
           
           
        
        
          
          
           
            Methodologies and frameworks
           
            
            
             ASD 
             DevOps 
             DAD 
             DSDM 
             FDD 
             IID 
             Kanban 
             Lean SD 
             LeSS 
             MDD 
             MSF 
             PSP 
             RAD 
             RUP 
             SAFe 
             Scrum 
             SEMAT 
             TSP 
             OpenUP 
             UP 
             XP
            
           
           
        
        
          
          
           
            Supporting disciplines
           
            
            
             Configuration management 
             Documentation 
             Software quality assurance 
             Project management 
             User experience
            
           
           
        
        
          
          
           
            Practices
           
            
            
             ATDD 
             BDD 
             CCO 
             CI 
             CD 
             DDD 
             PP 
             SBE 
             Stand-up 
             TDD
            
           
           
        
        
          
          
           
            Tools
           
            
            
             Compiler 
             Debugger 
             Profiler 
             GUI designer 
             Modeling 
             IDE 
             Build automation 
             Release automation 
             Infrastructure as code 
             Testing
            
           
           
        
        
          
          
           
            Standards and Bodies of Knowledge
           
            
            
             BABOK 
             CMMI 
             IEEE standards 
             ISO 9001 
             ISO/IEC standards 
             PMBOK 
             SWEBOK 
             ITIL 
             IREB
            
           
           
        
        
          
          
           
            Glossaries
           
            
            
             Artificial intelligence 
             Computer science 
             Electrical and electronics engineering
            
           
           
        
        
          
          
           
            Outlines
           
            
            
             Outline of software development
            
           
           
        
        
         
          
           
            v
            t
            e
           
          
        
       
       
      Software engineering is an engineering approach on a software development of systematics application. 
      A software engineer is a person who applies the principles of software engineering to design, develop, maintain, test, and evaluate computer software. The term programmer is sometimes used as a synonym, but may also lack connotations of engineering education or skills. 
      Engineering techniques are used to inform the software development process which involves the definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself. It heavily uses software configuration management which is about systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration and code throughout the system life cycle. Modern processes use software versioning.  
      
       
       
        Contents
        
        
        1 History 
        2 Definitions and terminology controversies 
          
          2.1 Etymology of "software engineer" 
          2.2 Suitability of the term 
           
        3 Tasks in large scale projects 
          
          3.1 Software requirements 
          3.2 Software design 
          3.3 Software construction 
          3.4 Software testing 
          3.5 Software maintenance 
           
        4 Education 
          
          4.1 Software engineering degree programs 
           
        5 Profession 
          
          5.1 Employment 
          5.2 Certification 
          5.3 Impact of globalization 
          5.4 Prizes 
           
        6 Criticism 
        7 See also 
          
          7.1 Study and practice 
          7.2 Roles 
          7.3 Professional aspects 
           
        8 References 
          
          8.1 Citations 
          8.2 Sources 
           
        9 Further reading 
        10 External links 
        
       
      History 
      
      
       Main article: History of software engineering
       
      Beginning in the 1960s, software engineering was seen as its own type of engineering. Additionally, the development of software engineering was seen as a struggle. It was difficult to keep up with the hardware which caused many problems for software engineers. Problems included software that was over budget, exceeded deadlines, required extensive de-bugging and maintenance, and unsuccessfully met the needs of consumers or was never even completed. In 1968 NATO held the first Software Engineering conference where issues related to software were addressed: guidelines and best practices for the development of software were established.  
      The origins of the term "software engineering" have been attributed to various sources. The term "software engineering" appeared in a list of services offered by companies in the June 1965 issue of COMPUTERS and AUTOMATION and was used more formally in the August 1966 issue of Communications of the ACM (Volume 9, number 8) “letter to the ACM membership” by the ACM President Anthony A. Oettinger, it is also associated with the title of a NATO conference in 1968 by Professor Friedrich L. Bauer, the first conference on software engineering. Margaret Hamilton described the discipline "software engineering" during the Apollo missions to give what they were doing legitimacy. At the time there was perceived to be a "software crisis". The 40th International Conference on Software Engineering (ICSE 2018) celebrates 50 years of "Software Engineering" with the Plenary Sessions' keynotes of Frederick Brooks and Margaret Hamilton. 
      In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania, United States. Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process. The Process Maturity Levels introduced would become the Capability Maturity Model Integration for Development(CMMI-DEV), which has defined how the US Government evaluates the abilities of a software development team. 
      Modern, generally accepted best-practices for software engineering have been collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge (SWEBOK). Software engineering is considered one of major computing disciplines.  
      Definitions and terminology controversies 
      Notable definitions of software engineering include:  
      
       "The systematic application of scientific and technological knowledge, methods, and experience to the design, implementation, testing, and documentation of software"—The Bureau of Labor Statistics—IEEE Systems and software engineering – Vocabulary 
       "The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software"—IEEE Standard Glossary of Software Engineering Terminology 
       "an engineering discipline that is concerned with all aspects of software production"—Ian Sommerville 
       "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"—Fritz Bauer 
       "a branch of computer science that deals with the design, implementation, and maintenance of complex computer programs"—Merriam-Webster 
       "'software engineering' encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time.  Software engineering can be thought of as 'programming integrated over time.'"—Software Engineering at Google
       
      The term has also been used less formally:  
      
       as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis; 
       as the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is formally studied as a sub-discipline of computer science; 
       as the term embodying the advocacy of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices.
       
      Etymology of "software engineer" 
      Margaret Hamilton promoted the term "software engineering" during her work on the Apollo program. The term "engineering" was used to acknowledge that the work should be taken just as seriously as other contributions toward the advancement of technology. Hamilton details her use of the term:
      
       When I first came up with the term, no one had heard of it before, at least in our world. It was an ongoing joke for a long time. They liked to kid me about my radical ideas. It was a memorable day when one of the most respected hardware gurus explained to everyone in a meeting that he agreed with me that the process of building software should also be considered an engineering discipline, just like with hardware. Not because of his acceptance of the new "term" per se, but because we had earned his and the acceptance of the others in the room as being in an engineering field in its own right.
       
      Suitability of the term 
      Individual commentators have disagreed sharply on how to define software engineering or its legitimacy as an engineering discipline. David Parnas has said that software engineering is, in fact, a form of engineering. Steve McConnell has said that it is not, but that it should be. Donald Knuth has said that programming is an art and a science. Edsger W. Dijkstra claimed that the terms software engineering and software engineer have been misused and should be considered harmful, particularly in the United States.  
      Tasks in large scale projects 
      
      
       Main article: Outline of software engineering
       
      Software requirements 
      
      
       Main article: Software requirements
       
      Requirements engineering is about the elicitation, analysis, specification, and validation of requirements for software. Software requirements can be of three different types. There are functional requirements, non-functional requirements, and domain requirements. The operation of the software should be performed and the proper output should be expected for the user to use. Non-functional requirements deal with issues like portability, security, maintainability, reliability, scalability, performance, reusability, and flexibility. They are classified into the following types: interference constraints, performance constraints (such as response time, security, storage space, etc.), operating constraints, life cycle constraints (maintainability, portability, etc.), and economic constraints. Knowledge of how the system or software works is needed when it comes to specifying non-functional requirements. Domain requirements have to do with the characteristic of a certain category or domain of projects.  
      Software design 
      
      
       Main article: Software design
       
      Software design is about the process of defining the architecture, components, interfaces, and other characteristics of a system or component. This is also called software architecture. Software design is divided into three different levels of design. The three levels are interface design, architectural design, and detailed design. Interface design is the interaction between a system and its environment. This happens at a high level of abstraction along with the inner workings of the system. Architectural design has to do with the major components of a system and their responsibilities, properties, interfaces, and their relationships and interactions that occur between them. Detailed design is the internal elements of all the major system components, their properties, relationships, processing, and usually their algorithms and the data structures.   
      Software construction 
      
      
       Main article: Software construction
       
      Software construction, the main activity of software development, is the combination of programming, unit testing, integration testing, and debugging. Testing during this phase is generally performed by the programmer while the software is under construction, to verify what was just written and decide when the code is ready to be sent to the next step.  
      Software testing 
      
      
       Main article: Software testing
       
      Software testing is an empirical, technical investigation conducted to provide stakeholders with information about the quality of the product or service under test, with different approaches such as unit testing and integration testing. It is one aspect of software quality. As a separate phase in software development, it is typically performed by quality assurance staff or a developer other than the one who wrote the code.  
      Software maintenance 
      
      
       Main article: Software maintenance
       
      Software maintenance refers to the activities required to provide cost-effective support after shipping the software product. Software maintenance is modifying and updating software applications after distribution to correct faults and to improve its performance. Software has a lot to do with the real world and when the real world changes, software maintenance is required. Software maintenance includes: error correction, optimization, deletion of unused and discarded features, and enhancement of features that already exist. Usually, maintenance takes up about 40% to 80% of the project cost therefore, focusing on maintenance keeps the costs down.  
      Education 
      
       
        
         
          
           
          
         
          
           The examples and perspective in this article may not represent a worldwide view of the subject. You may improve this article, discuss the issue on the talk page, or create a new article, as appropriate. (November 2010) (Learn how and when to remove this template message)
          
        
       
       
      Knowledge of computer programming is a prerequisite for becoming a software engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 1979:2005, describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience. Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the Joint Task Force on Computing Curricula of the IEEE Computer Society and the Association for Computing Machinery, and updated in 2014. A number of universities have Software Engineering degree programs; as of 2010, there were 244 Campus Bachelor of Software Engineering programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States. 
      In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering.  
      Software engineering degree programs 
      Half of all practitioners today have degrees in computer science, information systems, or information technology. A small, but growing, number of practitioners have software engineering degrees. In 1987, the Department of Computing at Imperial College London introduced the first three-year software engineering Bachelor's degree in the UK and the world; in the following year, the University of Sheffield established a similar program. In 1996, the Rochester Institute of Technology established the first software engineering bachelor's degree program in the United States, however, it did not obtain ABET accreditation until 2003, the same time as Rice University, Clarkson University, Milwaukee School of Engineering and Mississippi State University obtained theirs. In 1997, PSG College of Technology in Coimbatore, India was the first to start a five-year integrated Master of Science degree in Software Engineering. 
      Since then, software engineering undergraduate degrees have been established at many universities. A standard international curriculum for undergraduate software engineering degrees, SE2004, was defined by a steering committee between 2001 and 2004 with funding from the Association for Computing Machinery and the IEEE Computer Society. As of 2004, in the U.S., about 50 universities offer software engineering degrees, which teach both computer science and engineering principles and practices. The first software engineering Master's degree was established at Seattle University in 1979. Since then graduate software engineering degrees have been made available from many more universities. Likewise in Canada, the Canadian Engineering Accreditation Board (CEAB) of the Canadian Council of Professional Engineers has recognized several software engineering programs. 
      In 1998, the US Naval Postgraduate School (NPS) established the first doctorate program in Software Engineering in the world. Additionally, many online advanced degrees in Software Engineering have appeared such as the Master of Science in Software Engineering (MSE) degree offered through the Computer Science and Engineering Department at California State University, Fullerton. Steve McConnell opines that because most universities teach computer science rather than software engineering, there is a shortage of true software engineers. ETS (École de technologie supérieure) University and UQAM (Université du Québec à Montréal) were mandated by IEEE to develop the Software Engineering Body of Knowledge (SWEBOK), which has become an ISO standard describing the body of knowledge covered by a software engineer.  
      Profession 
      
      
       Main articles: Software engineering professionalism and Regulation and licensure in engineering
       
      Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, there is no licensing or legal requirement to assume or use the job title Software Engineer. In some areas of Canada, such as Alberta, British Columbia, Ontario, and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.) designation. In Europe, Software Engineers can obtain the European Engineer (EUR ING) professional title. 
      The United States, since 2013, has offered an NCEES Professional Engineer exam for Software Engineering, thereby allowing Software Engineers to be licensed and recognized. NCEES will end the exam after April 2019 due to lack of participation. Mandatory licensing is currently still largely debated, and perceived as controversial. In some parts of the US such as Texas, the use of the term Engineer is regulated by law and reserved only for use by individuals who have a Professional Engineer license. 
      The IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge – 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. The most current SWEBOK v3 is an updated version and was released in 2014. The IEEE also promulgates a "Software Engineering Code of Ethics".  
      Employment 
      
       
        
         
          
           
          
         
          
           The examples and perspective in this United States may not represent a worldwide view of the subject. You may improve this United States, discuss the issue on the talk page, or create a new United States, as appropriate. (September 2021) (Learn how and when to remove this template message)
          
        
       
       
      
      
       See also: Software engineering demographics
       
      The U. S. Bureau of Labor Statistics (BLS) counted 1,365,500 software developers holding jobs in the U.S. in 2018. Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees. The BLS estimates from 2014 to 2024 that computer software engineering would increase by 17% . This is down from the 2012 to 2022 BLS estimate of 22% for software engineering. And, is further down from their 30% 2010 to 2020 BLS estimate. Due to this trend, job growth may not be as fast as during the last decade, as jobs that would have gone to computer software engineers in the United States would instead be outsourced to computer software engineers in countries such as India and other foreign countries. In addition, the BLS Job Outlook for Computer Programmers, 2014–24 predicts an −8% (a decline, in their words), then a decline in the Job Outlook, 2019-29 of -9%, and a 10% decline for 2020-2030 for those who program computers. Furthermore, women in many software fields has also been declining over the years as compared to other engineering fields. However, this trend may change or slow in the future as many current software engineers in the U.S. market leave the profession or  age out of the market in the next few decades. 
      Many software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Many companies hire interns, often university or college students during a summer break, or externships. Specializations include analysts, architects, developers, testers, technical support, middleware analysts, project managers, educators, and researchers. 
      Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008. Potential injuries in these occupations are possible because like other workers who spend long periods sitting in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome.  
      Certification 
      The Software Engineering Institute offers certifications on specific topics like security, process improvement and software architecture. IBM, Microsoft and other companies also sponsor their own certification examinations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies. These certification programs are tailored to the institutions that would employ people who use these technologies. 
      Broader certification of general software engineering skills is available through various professional societies. As of 2006, the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP). In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA). The ACM had a professional certification program in the early 1980s, which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering. 
      In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified members (MBCS). Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status. In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP). In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng. The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE. Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.  
      Impact of globalization 
      The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / time zone difference that prevented human interaction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers. Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected. Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations. When North Americans are leaving work, Asians are just arriving to work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns. 
      While global outsourcing has several advantages, global – and generally distributed – development can run into serious difficulties resulting from the distance between developers. This is due to the key elements of this type of distance that have been identified as geographical, temporal, cultural and communication (that includes the use of different languages and dialects of English in different locations). Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published that highlights the benefits and problems associated with the complex activity. As with other aspects of software engineering research is ongoing in this and related areas.  
      Prizes 
      There are several prizes in the field of software engineering:  
      
       The Codie awards is a yearly award issued by the Software and Information Industry Association for excellence in software development within the software industry. 
       Jolt Awards are awards in the software industry. 
       Stevens Award is a software engineering award given in memory of Wayne Stevens.
       
      Criticism 
      Software engineering sees its practitioners as individuals who follow well-defined engineering approaches to problem-solving. These approaches are specified in various software engineering books and research papers, always with the connotations of predictability, precision, mitigated risk and professionalism. This perspective has led to calls for licensing, certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field. 
      Software engineering extends engineering and draws on the engineering model, i.e. engineering process, engineering project management, engineering requirements, engineering design, engineering construction, and engineering validation. The concept is so new that it is rarely understood, and it is widely misinterpreted, including in software engineering textbooks, papers, and among the communities of programmers and crafters. 
      One of the core issues in software engineering is that its approaches are not empirical enough because a real-world validation of approaches is usually absent, or very limited and hence software engineering is often misinterpreted as feasible only in a "theoretical environment." 
      Edsger Dijkstra, the founder of many of the concepts used within software development today, rejected the idea of "software engineering" up until his death in 2002, arguing that those terms were poor analogies for what he called the "radical novelty" of computer science:  
      
      
        A number of these phenomena have been bundled under the name "Software Engineering". As economics is known as "The Miserable Science", software engineering should be known as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal is self-contradictory. Software engineering, of course, presents itself as another worthy cause, but that is eyewash: if you carefully read its literature and analyse what its devotees actually do, you will discover that software engineering has accepted as its charter "How to program if you cannot."
       
      See also 
       
       
         
          
         Wikimedia Commons has media related to Software engineers.
         
       
       
      Study and practice 
      
       Computer science 
       Information engineering 
       Software craftsmanship 
       Software development 
       Release engineering
       
      Roles 
      
       Programmer 
       Systems analyst 
       Systems architect
       
      Professional aspects 
      
       Bachelor of Science in Information Technology 
       Bachelor of Software Engineering 
       List of software engineering conferences 
       List of computer science journals (including software engineering journals) 
       Software Engineering Institute
       
      References 
      Citations 
      
       
        
        ^ a b c d e f Abran et al. 2004, pp.&nbsp;1–1  
        ^ ACM (2007). "Computing Degrees &amp; Careers". ACM. Retrieved 2010-11-23.  
        ^ 
          Laplante, Phillip (2007). What Every Engineer Should Know about Software Engineering. Boca Raton: CRC. ISBN&nbsp;978-0-8493-7228-5. Retrieved 2011-01-21.  
        ^ a b c d e 
          "Software Engineering Body of Knowledge (SWEBOK Version 3), 2014" (pdf). www.swebok.org. IEEE Computer Society. Retrieved 24 May 2016.  
        ^ 
          "The history of coding and software engineering". www.hackreactor.com. Retrieved 2021-05-06.  
        ^ 
          Oettinger, A. G. (1966). "President's Letter to the ACM Membership". Commun. ACM. Association for Computing Machinery. 9 (8): 545–546. doi:10.1145/365758.3291288. ISSN&nbsp;0001-0782. S2CID&nbsp;53432801.  
        ^ 
          "The origin of "software engineering"". Retrieved 17 November 2017.  
        ^ 
          Randall, Brian. "The 1968/69 NATO Software Engineering Reports". Retrieved 17 November 2017.  
        ^ 
          Software Magazine. "What to Know About the Scientist who Invented the Term "Software Engineering"". Archived from the original on November 24, 2018. Retrieved February 12, 2019.  
        ^ Sommerville 2008, p.&nbsp;26 harvnb error: no target: CITEREFSommerville2008 (help)  
        ^ 
          Peter, Naur; Randell, Brian (7–11 October 1968). Software Engineering: Report of a conference sponsored by the NATO Science Committee (PDF). Garmisch, Germany: Scientific Affairs Division, NATO. Retrieved 2008-12-26.  
        ^ 
          Randell, Brian (10 August 2001). "The 1968/69 NATO Software Engineering Reports". Brian Randell's University Homepage. The School of the Computer Sciences, Newcastle University. Retrieved 2008-10-11. The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term "software engineering" as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer.  
        ^ 
          2018 International Conference on Software Engineering celebrating its 40th anniversary, and 50 years of Software engineering. "ICSE 2018 – Plenary Sessions – Fred Brooks". Retrieved 9 August 2018.  
        ^ 
          2018 International Conference on Software Engineering celebrating its 40th anniversary, and 50 years of Software engineering. "ICSE 2018 – Plenary Sessions – Margaret Hamilton". Retrieved 9 August 2018.  
        ^ 
          "ISO/IEC TR 19759:2005". Retrieved 2012-04-01.  
        ^ 
          "The Joint Task Force for Computing Curricula 2005" (PDF). 2014-10-21. Archived (PDF) from the original on 2014-10-21. Retrieved 2020-04-16.  
        ^ Systems and software engineering – Vocabulary, ISO/IEC/IEEE std 24765:2010(E), 2010.  
        ^ IEEE Standard Glossary of Software Engineering Terminology, IEEE std 610.12-1990, 1990.  
        ^ 
          Sommerville, Ian (2007) . "1.1.2 What is software engineering?". Software Engineering (8th&nbsp;ed.). Harlow, England: Pearson Education. p.&nbsp;7. ISBN&nbsp;978-0-321-31379-9. Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases: 1. Engineering discipline Engineers make things work. They apply theories, methods and tools where these are appropriate  Engineers also recognize that they must work to organizational and financial constraints.  2. All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools, methods and theories to support software production.  
        ^ 
          "Software Engineering". Information Processing. 71: 530–538.  
        ^ 
          "Definition of SOFTWARE ENGINEERING". www.merriam-webster.com. Retrieved 2019-11-25.  
        ^ 
          Winters, Titus; Manshrec, Tom; Wright, Hyrum (2020). "Preface, Programming Over Time". Software Engineering at Google. O'Reilly Media, Inc. pp.&nbsp;xix–xx, 6–7. ISBN&nbsp;978-1-492-08279-8. We propose that “software engineering” encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time. What practices can a software organization introduce that will best keep its code valuable over the long term? How can engineers make a codebase more sustainable and the software engineering discipline itself more rigorous?  
        ^ 
          Akram I. Salah (2002-04-05). "Engineering an Academic Program in Software Engineering" (PDF). 35th Annual Midwest Instruction and Computing Symposium. Retrieved 2006-09-13.: "For some, software engineering is just a glorified name for programming. If you are a programmer, you might put 'software engineer' on your business card—never 'programmer' though."  
        ^ Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in Software Engineering," in 
          Deimel, Lionel E. (1990). Software Engineering Education: SEI Conference 1990, Pittsburgh, Pennsylvania, USA, April 2–3,... Springer. ISBN&nbsp;978-0-387-97274-9.,p. 26: "As a practical matter, we regard software engineering as the necessary preparation for the practicing, software development and maintenance professional. The Computer Scientist is preparing for further theoretical studies..."  
        ^ 
          David Budgen; Pearl Brereton; Barbara Kitchenham; Stephen Linkman (2004-12-14). "Realizing Evidence-based Software Engineering". Archived from the original on 2006-12-17. Retrieved 2006-10-18.: "We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis,...."  
        ^ 
          Lawrence, Snyder (2017). Fluency with information technology&nbsp;: skills, concepts, &amp; capabilities (&nbsp;ed.). NY, NY. ISBN&nbsp;978-0134448725. OCLC&nbsp;960641978.  
        ^ 
          Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science Programmes". Annals of Software Engineering. 6: 19–37. doi:10.1023/A:1018949113292. S2CID&nbsp;35786237., p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, ."  
        ^ 
          Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science Programmes". Annals of Software Engineering. 6: 19–37. doi:10.1023/A:1018949113292. S2CID&nbsp;35786237., p. 20: "This paper argues that the introduction of accredited professional programs in software engineering, programmes that are modelled on programmes in traditional engineering disciplines will help to increase both the quality and quantity of graduates who are well prepared, by their education, to develop trustworthy software products."  
        ^ 
          McConnell, Steve (August 2003). Professional Software Development: Shorter Schedules, Better Projects, Superior Products, Enhanced Careers. Boston, MA: Addison-Wesley. ISBN&nbsp;0-321-19367-9., p. 39: "In my opinion, the answer to that question is clear: Professional software development should be engineering. Is it? No. But should it be? Unquestionably, yes. "  
        ^ 
          Knuth, Donald (1974). "Computer Programming as an Art" (PDF). Communications of the ACM. 17 (12): 667–673. doi:10.1145/361604.361612. S2CID&nbsp;207685720.Transcript of the 1974 Turing Award lecture.  
        ^ 
          Dijkstra, Edsger W; transcribed by Mario Béland (November 23, 2004) . "There is still a war going on (manuscript Austin, 3 December 1993)". E. W. Dijkstra Archive. The University of Texas at Austin, Department of Computer Sciences. Retrieved February 17, 2007. When the term was coined in 1968 by F.L. Bauer of the Technological University of Munich, I welcomed it.  I interpreted the introduction of the term "software engineering" as an apt reflection of the fact that the design of software systems was an activity par excellence for the mathematical engineer. . As soon the term arrived in the USA, it was relieved of all its technical content. It had to be so for in its original meaning it was totally unacceptable  In the meantime, software engineering has become an almost empty term, as was nicely demonstrated by Data General who overnight promoted all its programmers to the exalted rank of "software engineer"!  
        ^ 
          "Software Engineering | Classification of Software Requirements". GeeksforGeeks. 2018-06-19. Retrieved 2021-05-06.  
        ^ 
          "Software Engineering | Software Design Process". GeeksforGeeks. 2019-05-24. Retrieved 2021-05-06.  
        ^ 
          "What is Software Maintenance? Definition of Software Maintenance, Software Maintenance Meaning". The Economic Times. Retrieved 2021-05-06.  
        ^ 
          Abran, Alain, ed. (2005) . "Chapter 1: Introduction to the Guide". Guide to the Software Engineering Body of Knowledge. Los Alamitos: IEEE Computer Society. ISBN&nbsp;978-0-7695-2330-9. Retrieved 2010-09-13. The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience.  
        ^ 
          "SE2014 Software Engineering Curriculum" (PDF).  
        ^ Cowling, A. J. 1999. The first decade of an undergraduate degree program in software engineering. Ann. Softw. Eng. 6, 1–4 (Apr. 1999), 61–90.  
        ^ 
          "ABET Accredited Engineering Programs". April 3, 2007. Retrieved April 3, 2007.  
        ^ McConnell, Steve (July 10, 2003). Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers. 
          ISBN&nbsp;978-0-321-19367-4.  
        ^ 
          Software Engineering — Guide to the software engineering body of knowledge (SWEBOK), International Organization for Standardization, 2015, retrieved January 11, 2020  
        ^ 
          Williams, N.S.W. (19–21 February 2001). "Professional Engineers Ontario's approach to licensing software engineering practitioners". Software Engineering Education and Training, 2001 Proceedings. 14th Conference on. Charlotte, NC: IEEE. pp.&nbsp;77–78.  
        ^ 
          "NCEES Software Engineering Exam Specifications" (PDF). Archived from the original (PDF) on 2013-08-27. Retrieved 2012-04-01.  
        ^ 
          "NCEES discontinuing PE Software Engineering exam". National Council of Examiners for Engineering and Surveying. 13 March 2018. Retrieved 6 August 2018.  
        ^ 
          "SWEBOK Guide Version 3". Retrieved 2015-03-09.  
        ^ 
          "Software Engineering Code of Ethics" (PDF). Retrieved 2012-03-25.  
        ^ 
          "Software Developers". Occupational Outlook Handbook. U. S. Bureau of labor Statistics. 4 September 2019. Retrieved 11 December 2019.  
        ^ 
          "Computing Disciplines and Majors" (PDF). ACM. Retrieved 6 September 2019.  
        ^ a b 
          "Software Developers: Occupational Outlook Handbook". U.S. Bureau of Labor Statistics.  
        ^ 
          "Computer Software Engineer". Bureau of Labor Statistics. March 19, 2010. Archived from the original on July 26, 2013. Retrieved July 20, 2012.  
        ^ 
          "Software Developers". Bureau of Labor Statistics. January 8, 2014. Retrieved July 21, 2012.  
        ^ a b 
          "Computer Programmers: Occupational Outlook Handbook". U.S. Bureau of Labor Statistics.  
        ^ a b 
          Rosenthal, Rachel (August 4, 2020). "Tech Companies Want You to Believe America Has a Skills Gap". Bloomberg. Retrieved October 8, 2021.}: CS1 maint: url-status (link)  
        ^ 
          "Computer Programmers&nbsp;: Occupational Outlook Handbook:&nbsp;: U.S. Bureau of Labor Statistics". www.bls.gov.  
        ^ 
          "Archive By Publication&nbsp;: Beyond the Numbers: U.S. Bureau of Labor Statistics". www.bls.gov.  
        ^ 
          "The Soon-to-Be-Extinct Embedded Software Engineer". designnews.com. May 10, 2018.  
        ^ 
          "hp's Developer Portal | HP International Women's Week: Women in Computer Science dropping since 1980s". developers.hp.com.  
        ^ 
          "Computer Software Engineers and Computer Programmers". Retrieved 2009-12-17.  
        ^ 
          "SEI certification page". Sei.cmu.edu. Retrieved 2012-03-25.  
        ^ 
          Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008". InformIT. Retrieved 2009-03-03.  
        ^ 
          IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly" (PDF). Retrieved 2007-04-10.  
        ^ 
          IEEE. "CSDA". Retrieved 2010-04-20.  
        ^ 
          ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession" (PDF). Association for Computing Machinery (ACM). Archived from the original (PDF) on May 17, 2008. Retrieved 2009-03-03. At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed.  
        ^ 
          Canadian Information Processing Society. "I.S.P. Designation". Retrieved 2007-03-15.  
        ^ 
          "Professional Engineers Ontario: Welcome to PEO's website". Peo.on.ca. Retrieved 2012-03-25.  
        ^ 
          Thibodaux, Patrick (2006-05-05). "As outsourcing gathers steam, computer science interest wanes". Computerworld.com. Retrieved 2016-12-06.  
        ^ 
          "Computer Programmers". Bls.gov. Retrieved 2012-03-25.  
        ^ 
          Mullins, Robert (2007-03-13). "Software developer growth slows in North America". InfoWorld. Archived from the original on 2009-04-04. Retrieved 2012-03-25.  
        ^ 
          "Gartner Magic Quadrant" (PDF). Cognizant.com. Retrieved 2012-03-25.  
        ^ 
          Casey, Valentine (2010-08-20). "Virtual software team project management". Journal of the Brazilian Computer Society. 16 (2): 83–96. doi:10.1007/s13173-010-0013-3. S2CID&nbsp;14383734.  
        ^ Some external links: 
          
           SIGSOFT Awards 
           ICSE's Most Influential Paper Award 
           A list of various Software Engineering (and SE-related) Awards
            
        ^ 
          Dijkstra, E. W. (1988). "On the cruelty of really teaching computing science". Retrieved 2014-01-10.  
       
       
      Sources 
      
       
       
        
         Abran, Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004). Guide to the Software Engineering Body of Knowledge. IEEE. ISBN&nbsp;978-0-7695-2330-9. 
        
         Sommerville, Ian (2010). Software Engineering (7th&nbsp;ed.). Pearson Education. ISBN&nbsp;978-81-7758-530-8. Retrieved 10 January 2013.
        
       
      Further reading 
      
       
        Guide to the Software Engineering Body of Knowledge (SWEBOK Guide): Version 3.0. Pierre Bourque, Richard E. Fairley (eds.). IEEE Computer Society. 2014. ISBN&nbsp;978-0-7695-5166-1.}: CS1 maint: others (link) 
       
        Pressman, Roger S (2009). Software Engineering: A Practitioner's Approach (7th&nbsp;ed.). Boston, Mass: McGraw-Hill. ISBN&nbsp;978-0-07-337597-7. 
       
        Sommerville, Ian (2010) . Software Engineering (9th&nbsp;ed.). Harlow, England: Pearson Education. ISBN&nbsp;978-0-13-703515-1. 
       
        Jalote, Pankaj (2005) . An Integrated Approach to Software Engineering (3rd&nbsp;ed.). Springer. ISBN&nbsp;978-0-387-20881-7. 
       
        Bruegge, Bernd; Dutoit, Allen (2009). Object-oriented software engineering&nbsp;: using UML, patterns, and Java (3rd&nbsp;ed.). Prentice Hall. ISBN&nbsp;978-0-13-606125-0. 
       
        Oshana, Robert (2019-06-21). Software engineering for embedded systems&nbsp;: methods, practical techniques, and applications (Second&nbsp;ed.). Kidlington, Oxford, United Kingdom. ISBN&nbsp;978-0-12-809433-4.
       
      External links 
       
       
         
          
         Wikimedia Commons has media related to Software engineering.
         
       
       
       
       
         
          
         Wikiversity has learning resources about Software engineering
         
       
       
      
       Guide to the Software Engineering Body of Knowledge 
       The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC 
       Software Engineering Institute Carnegie Mellon
       
      
       
      
      
       
        
         
          
           
           
            
             v
             t
             e
            
           
           
            Software engineering
           
         
         
          Fields
          
            
            
             Computer programming 
             DevOps 
             Requirements engineering 
             Site reliability engineering 
             Software deployment 
             Software design 
             Software maintenance 
             Software testing 
             Systems analysis 
             Formal methods
             
           
          
           
            
           
         
         
          Concepts
          
            
            
             Data modeling 
             Enterprise architecture 
             Functional specification 
             Modeling language 
             Programming paradigm 
             Software 
             Software archaeology 
             Software architecture 
             Software configuration management 
             Software development process/methodology 
             Software quality 
             Software quality assurance 
             Software verification and validation 
             Structured analysis 
             Essential Analysis
             
           
         
         
          Orientations
          
            
            
             Agile 
             Aspect-oriented 
             Object orientation 
             Ontology 
             Service orientation 
             SDLC
             
           
         
         
          Models
          
           
           
            
             
              Developmental
              
                
                
                 Agile 
                 EUP 
                 Executable UML 
                 Incremental model 
                 Iterative model 
                 Prototype model 
                 RAD 
                 UP 
                 Scrum 
                 Spiral model 
                 V-Model 
                 Waterfall model 
                 XP
                 
               
             
             
              Other
              
                
                
                 SPICE 
                 CMMI 
                 Data model 
                 ER model 
                 Function model 
                 Information model 
                 Metamodeling 
                 Object model 
                 Systems model 
                 View model
                 
               
             
             
              Languages
              
                
                
                 IDEF 
                 UML 
                 USL 
                 SysML
                 
               
             
            
           
           
         
         
          Related fields
          
            
            
             Computer science 
             Computer engineering 
             Information science 
             Project management 
             Risk management 
             Systems engineering
             
           
         
         
          
            
            
              Category 
              Commons
             
           
         
        
       
       
      
       
      
      
       
        
         
          
           
           
            
             v
             t
             e
            
           
           
            Systems engineering
           
         
         
          Subfields
          
            
            
             Aerospace engineering 
             Biological systems engineering 
             Configuration management 
             Earth systems engineering and management 
             Electrical engineering 
             Enterprise systems engineering 
             Performance engineering 
             Reliability engineering 
             Safety engineering
             
           
         
         
          Processes
          
            
            
             Requirements engineering 
             Functional specification 
             System integration 
             Verification and validation 
             Design review
             
           
         
         
          Concepts
          
            
            
             Business process 
             System 
             System lifecycle 
             V-Model 
             Systems development life cycle
             
           
         
         
          Tools
          
            
            
             Decision-making 
             Function modelling 
             IDEF 
             Optimization 
             Quality function deployment 
             System dynamics 
             Systems Modeling Language 
             Systems analysis 
             Systems modeling 
             Work breakdown structure
             
           
         
         
          People
          
            
            
             James S. Albus 
             Ruzena Bajcsy 
             Benjamin S. Blanchard 
             Wernher von Braun 
             Kathleen Carley 
             Harold Chestnut 
             Wolt Fabrycky 
             Barbara Grosz 
             Arthur David Hall III 
             Derek Hitchins 
             Robert E. Machol 
             Radhika Nagpal 
             Simon Ramo 
             Joseph Francis Shea 
             Katia Sycara 
             Manuela M. Veloso 
             John N. Warfield
             
           
         
         
          Related fields
          
            
            
             Control engineering 
             Computer engineering 
             Industrial engineering 
             Operations research 
             Project management 
             Quality management 
             Risk management 
             Software engineering
             
           
         
         
          
            
            
             Category
             
           
         
        
       
       
      
       
      
      
       
        
         
          
           
           
            
             v
             t
             e
            
           
           
            Engineering
           
         
         
          SpecialtiesandInterdisciplinarity
          
           
           
            
             
              Civil
              
                
                
                 Architectural 
                 Construction 
                 Earthquake 
                 Environmental 
                 Geotechnical 
                 Hydraulic 
                 Mining 
                 Structural 
                 Transportation
                 
               
             
             
              Mechanical
              
                
                
                 Acoustical 
                 Aerospace 
                 Automotive 
                 Marine 
                 Railway 
                 Thermal
                 
               
             
             
              Electrical
              
                
                
                 Computer 
                  
                   outline
                   
                 Control 
                 Electromechanics 
                 Electronics 
                 Microwaves 
                 Optical 
                 Photonics 
                 Power 
                 Radio Frequency 
                 Telecommunications
                 
               
             
             
              Chemical
              
                
                
                 Biochemical 
                 Biological 
                 Molecular 
                 Petroleum 
                 Process 
                 Reaction
                 
               
             
             
              Other
              
                
                
                 Agricultural 
                 Applied mechanics 
                 Audio 
                 Biomedical 
                 Engineering mathematics 
                 Engineering physics 
                 Fire 
                 Food 
                 Industrial 
                 Information 
                 Materials science 
                  
                   Ceramics 
                   Metals 
                   Polymers
                   
                 Mechatronics 
                 Military 
                 Nanotechnology 
                 Nuclear 
                 Privacy 
                 Robotics 
                 Sanitary 
                 Security 
                 Software 
                 Systems 
                 Genetic 
                 Energy and environmental 
                 Tissue 
                 Bioresource 
                 Electrochemical
                 
               
             
            
           
           
          
           
            
           
         
         
          Engineering education
          
            
            
             Bachelor of Engineering 
             Master of Engineering 
             Doctor of Engineering 
             Engineer's degree 
             Engineering studies
             
           
         
         
          Related topics
          
            
            
             Engineer 
             History of engineering
             
           
         
         
          Glossaries
          
            
            
             Engineering 
              
               A–L 
               M–Z
               
             Aerospace engineering 
             Civil engineering 
             Electrical and electronics engineering 
             Mechanical engineering 
             Structural engineering
             
           
         
         
          
            
            
             Engineering branches 
              Category 
              Commons 
              Wikiproject 
              Portal 
             &nbsp;Portal
             
           
         
        
       
       
      
       
      
      
       
        
         
          
           
           
            
             v
             t
             e
            
           
           
            Computer science
           
         
         
          
           
            Note: This template roughly follows the 2012 ACM Computing Classification System.
           
         
         
          Hardware
          
            
            
             Printed circuit board 
             Peripheral 
             Integrated circuit 
             Very Large Scale Integration 
             Systems on Chip (SoCs) 
             Energy consumption (Green computing) 
             Electronic design automation 
             Hardware acceleration
             
           
          
           
            
           
         
         
          Computer systems organization
          
            
            
             Computer architecture 
             Embedded system 
             Real-time computing 
             Dependability
             
           
         
         
          Networks
          
            
            
             Network architecture 
             Network protocol 
             Network components 
             Network scheduler 
             Network performance evaluation 
             Network service
             
           
         
         
          Software organization
          
            
            
             Interpreter 
             Middleware 
             Virtual machine 
             Operating system 
             Software quality
             
           
         
         
          Software notations and tools
          
            
            
             Programming paradigm 
             Programming language 
             Compiler 
             Domain-specific language 
             Modeling language 
             Software framework 
             Integrated development environment 
             Software configuration management 
             Software library 
             Software repository
             
           
         
         
          Software development
          
            
            
             Control variable 
             Software development process 
             Requirements analysis 
             Software design 
             Software construction 
             Software deployment 
             Software maintenance 
             Programming team 
             Open-source model
             
           
         
         
          Theory of computation
          
            
            
             Model of computation 
             Formal language 
             Automata theory 
             Computability theory 
             Computational complexity theory 
             Logic 
             Semantics
             
           
         
         
          Algorithms
          
            
            
             Algorithm design 
             Analysis of algorithms 
             Algorithmic efficiency 
             Randomized algorithm 
             Computational geometry
             
           
         
         
          Mathematics of computing
          
            
            
             Discrete mathematics 
             Probability 
             Statistics 
             Mathematical software 
             Information theory 
             Mathematical analysis 
             Numerical analysis 
             Theoretical computer science
             
           
         
         
          Information systems
          
            
            
             Database management system 
             Information storage systems 
             Enterprise information system 
             Social information systems 
             Geographic information system 
             Decision support system 
             Process control system 
             Multimedia information system 
             Data mining 
             Digital library 
             Computing platform 
             Digital marketing 
             World Wide Web 
             Information retrieval
             
           
         
         
          Security
          
            
            
             Cryptography 
             Formal methods 
             Security services 
             Intrusion detection system 
             Hardware security 
             Network security 
             Information security 
             Application security
             
           
         
         
          Human–computer interaction
          
            
            
             Interaction design 
             Social computing 
             Ubiquitous computing 
             Visualization 
             Accessibility
             
           
         
         
          Concurrency
          
            
            
             Concurrent computing 
             Parallel computing 
             Distributed computing 
             Multithreading 
             Multiprocessing
             
           
         
         
          Artificial intelligence
          
            
            
             Natural language processing 
             Knowledge representation and reasoning 
             Computer vision 
             Automated planning and scheduling 
             Search methodology 
             Control method 
             Philosophy of artificial intelligence 
             Distributed artificial intelligence
             
           
         
         
          Machine learning
          
            
            
             Supervised learning 
             Unsupervised learning 
             Reinforcement learning 
             Multi-task learning 
             Cross-validation
             
           
         
         
          Graphics
          
            
            
             Animation 
             Rendering 
             Image manipulation 
             Graphics processing unit 
             Mixed reality 
             Virtual reality 
             Image compression 
             Solid modeling
             
           
         
         
          Applied computing
          
            
            
             E-commerce 
             Enterprise software 
             Computational mathematics 
             Computational physics 
             Computational chemistry 
             Computational biology 
             Computational social science 
             Computational engineering 
             Computational healthcare 
             Digital art 
             Electronic publishing 
             Cyberwarfare 
             Electronic voting 
             Video games 
             Word processing 
             Operations research 
             Educational technology 
             Document management
             
           
         
         
          
            
            
              Category 
              Outline 
             WikiProject 
              Commons
             
           
         
        
       
       
      
       
      
      
       
        
         
          
           
            Authority control 
           
         
         
          National libraries
          
            
            
             Spain 
             France (data) 
             Germany 
             United States 
             Japan
             
           
         
         
          Other
          
            
            
             Faceted Application of Subject Terminology
             
           
         
        
       
          
     
     
      
      
     
      Retrieved from "https://en.wikipedia.org/w/index.php?title=Software_engineering&amp;oldid=1070811563"
     
     
    
     
      Categories: 
      
       Software engineering
       Engineering disciplines
      
     
     
      Hidden categories: 
      
       Harv and Sfn no-target errors
       CS1 maint: url-status
       Articles with short description
       Short description is different from Wikidata
       Wikipedia articles needing clarification from January 2022
       Articles that may contain original research from April 2015
       Articles with limited geographic scope from November 2010
       Articles containing potentially dated statements from 2010
       All articles containing potentially dated statements
       All articles with unsourced statements
       Articles with unsourced statements from February 2007
       Articles with unsourced statements from May 2012
       Articles containing potentially dated statements from 2004
       Articles with unsourced statements from June 2007
       Articles with unsourced statements from September 2021
       Articles with limited geographic scope from September 2021
       Articles containing potentially dated statements from 2006
       Articles with unsourced statements from March 2009
       Articles with specifically marked weasel-worded phrases from October 2018
       Commons category link is locally defined
       CS1 maint: others
       Commons category link from Wikidata
       Articles with BNE identifiers
       Articles with BNF identifiers
       Articles with GND identifiers
       Articles with LCCN identifiers
       Articles with NDL identifiers
       Articles with FAST identifiers
      
     
     
    
   
   
    
   
   
   Navigation menu 
    
     
      Personal tools  
      
      
       Not logged in
       Talk
       Contributions
       Create account
       Log in
       
      
     
     
      
       Namespaces  
       
       
        Article
        Talk
        
       
      
      
       
       English expanded collapsed  
       
        
       
      
     
     
      
       Views  
       
       
        Read
        Edit
        View history
        
       
      
      
       
       More expanded collapsed  
       
        
       
      
      
       
        Search  
        
         
          
          
          
          
         
        
       
      
     
    
    
      
     
     
      Navigation  
      
      
       Main page
       Contents
       Current events
       Random article
       About Wikipedia
       Contact us
       Donate
       
      
     
     
      Contribute  
      
      
       Help
       Learn to edit
       Community portal
       Recent changes
       Upload file
       
      
     
     
      Tools  
      
      
       What links here
       Related changes
       Upload file
       Special pages
       Permanent link
       Page information
       Cite this page
       Wikidata item
       
      
     
     
      Print/export  
      
      
       Download as PDF
       Printable version
       
      
     
     
      In other projects  
      
      
       Wikimedia Commons
       Wikibooks
       Wikiquote
       Wikiversity
       
      
     
     
      Languages  
      
      
       Afrikaans
       አማርኛ
       العربية
       Asturianu
       Azərbaycanca
       বাংলা
       Български
       Bosanski
       Català
       Čeština
       Cymraeg
       Dansk
       Deutsch
       Ελληνικά
       Español
       Esperanto
       Euskara
       فارسی
       Français
       Gaeilge
       Gaelg
       Galego
       한국어
       हिन्दी
       Hrvatski
       Bahasa Indonesia
       Íslenska
       Italiano
       עברית
       Kiswahili
       Kurdî
       ລາວ
       Latina
       Latviešu
       Lietuvių
       Македонски
       മലയാളം
       Bahasa Melayu
       Mirandés
       Монгол
       Nederlands
       日本語
       Norsk bokmål
       Norsk nynorsk
       ଓଡ଼ିଆ
       ភាសាខ្មែរ
       Polski
       Português
       Română
       Русский
       Scots
       Shqip
       සිංහල
       Simple English
       Slovenčina
       کوردی
       Српски / srpski
       Srpskohrvatski / српскохрватски
       Sunda
       Suomi
       Tagalog
       தமிழ்
       ไทย
       ትግርኛ
       Türkçe
       Українська
       Tiếng Việt
       Winaray
       吴语
       ייִדיש
       粵語
       中文
       
      
       Edit links
       
      
     
    
   
   
    
     This page was last edited on 9 February 2022, at 11:34&nbsp;(UTC). 
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. 
    
    
    Privacy policy 
    About Wikipedia 
    Disclaimers 
    Contact Wikipedia 
    Mobile view 
    Developers 
    Statistics 
    Cookie statement 
    
    
     
     
    
   
   
   
    
 
