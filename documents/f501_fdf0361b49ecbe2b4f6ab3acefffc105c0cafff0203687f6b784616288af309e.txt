
 
  
   
  NoSQL - Wikipedia 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
 
   
   
    
   
    
    
    
    
   NoSQL 
    
    
     From Wikipedia, the free encyclopedia
     
    
     &nbsp;&nbsp;(Redirected from Structured storage)
     
     
     Jump to navigation Jump to search 
    
     
      
       Database class for storage and retrieval of modeled data
       
      
      
       "Structured storage" redirects here. For the Microsoft technology also known as structured storage, see COM Structured Storage.
       
       A NoSQL (originally referring to "non-SQL" or "non-relational") database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases. Such databases have existed since the late 1960s, but the name "NoSQL" was only coined in the early 21st century, triggered by the needs of Web 2.0 companies. NoSQL databases are increasingly used in big data and real-time web applications. NoSQL systems are also sometimes called Not only SQL to emphasize that they may support SQL-like query languages or sit alongside SQL databases in polyglot-persistent architectures. 
      Motivations for this approach include simplicity of design, simpler "horizontal" scaling to clusters of machines (which is a problem for relational databases), finer control over availability and limiting the object-relational impedance mismatch. The data structures used by NoSQL databases (e.g. key–value pair, wide column, graph, or document) are different from those used by default in relational databases, making some operations faster in NoSQL. The particular suitability of a given NoSQL database depends on the problem it must solve. Sometimes the data structures used by NoSQL databases are also viewed as "more flexible" than relational database tables. 
      Many NoSQL stores compromise consistency (in the sense of the CAP theorem) in favor of availability, partition tolerance, and speed. Barriers to the greater adoption of NoSQL stores include the use of low-level query languages (instead of SQL, for instance), lack of ability to perform ad hoc joins across tables, lack of standardized interfaces, and huge previous investments in existing relational databases. Most NoSQL stores lack true ACID transactions, although a few databases have made them central to their designs. 
      Instead, most NoSQL databases offer a concept of "eventual consistency", in which database changes are propagated to all nodes "eventually" (typically within milliseconds), so queries for data might not return updated data immediately or might result in reading data that is not accurate, a problem known as stale reads. Additionally, some NoSQL systems may exhibit lost writes and other forms of data loss. Some NoSQL systems provide concepts such as write-ahead logging to avoid data loss. For distributed transaction processing across multiple databases, data consistency is an even bigger challenge that is difficult for both NoSQL and relational databases. Relational databases "do not allow referential integrity constraints to span databases". Few systems maintain both ACID transactions and X/Open XA standards for distributed transaction processing. Interactive relational databases share conformational relay analysis techniques as a common feature. Limitations within the interface environment are overcome using semantic virtualization protocols, such that NoSQL services are accessible to most operating systems.  
      
       
       
        Contents
        
        
        1 History 
        2 Types and examples 
          
          2.1 Key–value store 
          2.2 Document store 
          2.3 Graph 
           
        3 Performance 
        4 Handling relational data 
          
          4.1 Multiple queries 
          4.2 Caching, replication and non-normalized data 
          4.3 Nesting data 
           
        5 ACID and join support 
        6 See also 
        7 References 
        8 Further reading 
        9 External links 
        
       
      History 
      The term NoSQL was used by Carlo Strozzi in 1998 to name his lightweight Strozzi NoSQL open-source relational database that did not expose the standard Structured Query Language (SQL) interface, but was still relational. His NoSQL RDBMS is distinct from the around-2009 general concept of NoSQL databases. Strozzi suggests that, because the current NoSQL movement "departs from the relational model altogether, it should therefore have been called more appropriately 'NoREL'", referring to "not relational". 
      Johan Oskarsson, then a developer at Last.fm, reintroduced the term NoSQL in early 2009 when he organized an event to discuss "open-source distributed, non-relational databases". The name attempted to label the emergence of an increasing number of non-relational, distributed data stores, including open source clones of Google's Bigtable/MapReduce and Amazon's DynamoDB.  
      Types and examples 
      There are various ways to classify NoSQL databases, with different categories and subcategories, some of which overlap. What follows is a non-exhaustive classification by data model, with examples:  
       
       
         
         Type 
         Notable examples of this type 
         
         
         Key–value cache 
         Apache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan, Memcached, Redis, Velocity 
         
         
         Key–value store 
         Azure Cosmos DB, ArangoDB, Amazon DynamoDB, Aerospike, Couchbase 
         
         
         Key–value store (eventually consistent) 
         Azure Cosmos DB, Oracle NoSQL Database, Riak, Voldemort 
         
         
         Key–value store (ordered) 
         FoundationDB, InfinityDB, LMDB, MemcacheDB 
         
         
         Tuple store 
         Apache River, GigaSpaces, Tarantool, TIBCO ActiveSpaces, OpenLink Virtuoso 
         
         
         Triplestore  
         AllegroGraph, MarkLogic, Ontotext-OWLIM, Oracle NoSQL database, Profium Sense, Virtuoso Universal Server 
         
         
         Object database 
         Objectivity/DB, Perst, ZopeDB, db4o, GemStone/S, InterSystems Caché, JADE, ObjectDatabase++, ObjectDB, ObjectStore, ODABA, Realm, OpenLink Virtuoso, Versant Object Database, ZODB 
         
         
         Document store 
         Azure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB, DocumentDB, eXist-db, IBM Domino, MarkLogic, MongoDB, Qizx, RethinkDB, Elasticsearch, OrientDB 
         
         
         Wide Column Store 
         Azure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud Datastore, HBase, Hypertable, ScyllaDB 
         
         
         Native multi-model database 
         ArangoDB, Azure Cosmos DB, OrientDB, MarkLogic, Apache Ignite, Couchbase, FoundationDB, MarkLogic, Oracle Database 
         
         
         Graph database  
         Azure Cosmos DB, AllegroGraph, ArangoDB, InfiniteGraph, Apache Giraph, MarkLogic, Neo4J, OrientDB, Virtuoso 
         
         
         Multivalue database  
         D3 Pick database, Extensible Storage Engine (ESE/NT), InfinityDB, InterSystems Caché, jBASE Pick database, mvBase Rocket Software, mvEnterprise Rocket Software, Northgate Information Solutions Reality (the original Pick/MV Database), OpenQM, Revelation Software's OpenInsight (Windows) and Advanced Revelation (DOS), UniData Rocket U2, UniVerse Rocket U2 
        
       
       
      Key–value store 
      
      
       Main article: Key–value database
       
      Key–value (KV) stores use the associative array (also called a map or dictionary) as their fundamental data model. In this model, data is represented as a collection of key–value pairs, such that each possible key appears at most once in the collection. 
      The key–value model is one of the simplest non-trivial data models, and richer data models are often implemented as an extension of it. The key–value model can be extended to a discretely ordered model that maintains keys in lexicographic order. This extension is computationally powerful, in that it can efficiently retrieve selective key ranges. 
      Key–value stores can use consistency models ranging from eventual consistency to serializability. Some databases support ordering of keys. There are various hardware implementations, and some users store data in memory (RAM), while others on solid-state drives (SSD) or rotating disks (aka hard disk drive (HDD)).  
      Document store 
      
      
       Main articles: Document-oriented database and XML database
       
      The central concept of a document store is that of a "document". While the details of this definition differ among document-oriented databases, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, and JSON and binary forms like BSON. Documents are addressed in the database via a unique key that represents that document. Another defining characteristic of a document-oriented database is an API or query language to retrieve documents based on their contents. 
      Different implementations offer different ways of organizing and/or grouping documents:  
      
       Collections 
       Tags 
       Non-visible metadata 
       Directory hierarchies
       
      Compared to relational databases, collections could be considered analogous to tables and documents analogous to records. But they are different: every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.  
      Graph 
      
      
       Main article: Graph database
       
      Graph databases are designed for data whose relations are well represented as a graph consisting of elements connected by a finite number of relations. Examples of data include social relations, public transport links, road maps, network topologies, etc.  
      
       
        Graph databases and their query language
       
       
       
       
         
         Name 
         Language(s) 
         Notes 
         
         
         AllegroGraph 
         SPARQL 
         RDF triple store 
         
         
         Amazon Neptune 
         Gremlin, SPARQL 
         Graph database 
         
         
         ArangoDB 
         AQL, JavaScript, GraphQL 
         Multi-model DBMS Document, Graph database and Key-value store 
         
         
         Azure Cosmos DB 
         Gremlin 
         Graph database 
         
         
         DEX/Sparksee 
         C++, Java, C#, Python 
         Graph database 
         
         
         FlockDB 
         Scala 
         Graph database 
         
         
         IBM DB2 
         SPARQL 
         RDF triple store added in DB2 10 
         
         
         InfiniteGraph 
         Java 
         Graph database 
         
         
         JanusGraph 
         Java 
         Graph database 
         
         
         MarkLogic 
         Java, JavaScript, SPARQL, XQuery 
         Multi-model document database and RDF triple store 
         
         
         Neo4j 
         Cypher 
         Graph database 
         
         
         OpenLink Virtuoso 
         C++, C#, Java, SPARQL 
         Middleware and database engine hybrid 
         
         
         Oracle 
         SPARQL 1.1 
         RDF triple store added in 11g 
         
         
         OrientDB 
         Java, SQL 
         Multi-model document and graph database 
         
         
         OWLIM 
         Java, SPARQL 1.1 
         RDF triple store 
         
         
         Profium Sense 
         Java, SPARQL 
         RDF triple store 
         
         
         RedisGraph 
         Cypher 
         Graph database 
         
         
         Sqrrl Enterprise 
         Java 
         Graph database 
         
         
         TerminusDB  
         JavaScript, Python, datalog  
         Open source RDF triple-store and document store 
        
       
       
      Performance 
      The performance of NoSQL databases is usually evaluated using the metric of throughput, which is measured as operations/second. Performance evaluation must pay attention to the right benchmarks such as production configurations, parameters of the databases, anticipated data volume, and concurrent user workloads. 
      Ben Scofield rated different categories of NoSQL databases as follows:  
       
       
         
         Data model 
         Performance 
         Scalability 
         Flexibility 
         Complexity 
         Functionality 
         
         
         Key–value store 
         high 
         high 
         high 
         none 
         variable (none) 
         
         
         Column-oriented store 
         high 
         high 
         moderate 
         low 
         minimal 
         
         
         Document-oriented store 
         high 
         variable (high) 
         high 
         low 
         variable (low) 
         
         
         Graph database 
         variable 
         variable 
         high 
         high 
         graph theory 
         
         
         Relational database 
         variable 
         variable 
         low 
         moderate 
         relational algebra 
        
       
       
      Performance and scalability comparisons are most commonly done using the YCSB benchmark.  
      Handling relational data 
      Since most NoSQL databases lack ability for joins in queries, the database schema generally needs to be designed differently. There are three main techniques for handling relational data in a NoSQL database. (See table Join and ACID Support for NoSQL databases that support joins.)  
      Multiple queries 
      Instead of retrieving all the data with one query, it is common to do several queries to get the desired data. NoSQL queries are often faster than traditional SQL queries so the cost of additional queries may be acceptable. If an excessive number of queries would be necessary, one of the other two approaches is more appropriate.  
      Caching, replication and non-normalized data 
      Instead of only storing foreign keys, it is common to store actual foreign values along with the model's data. For example, each blog comment might include the username in addition to a user id, thus providing easy access to the username without requiring another lookup. When a username changes however, this will now need to be changed in many places in the database. Thus this approach works better when reads are much more common than writes.  
      Nesting data 
      With document databases like MongoDB it is common to put more data in a smaller number of collections. For example, in a blogging application, one might choose to store comments within the blog post document so that with a single retrieval one gets all the comments. Thus in this approach a single document contains all the data you need for a specific task.  
      ACID and join support 
      A database is marked as supporting ACID properties (Atomicity, Consistency, Isolation, Durability) or join operations if the documentation for the database makes that claim. However, this doesn't necessarily mean that the capability is fully supported in a manner similar to most SQL databases.  
       
       
         
         Database 
         ACID 
         Joins 
         
         
         Aerospike 
         Yes 
         No 
         
         
         Apache Ignite 
         Yes 
         Yes 
         
         
         ArangoDB 
         Yes 
         Yes 
         
         
         Amazon DynamoDB 
         Yes 
         No 
         
         
         Couchbase 
         Yes 
         Yes 
         
         
         CouchDB 
         Yes 
         Yes 
         
         
         Db2 
         Yes 
         Yes 
         
         
         InfinityDB 
         Yes 
         No 
         
         
         LMDB 
         Yes 
         No 
         
         
         MarkLogic 
         Yes 
         Yes 
         
         
         MongoDB 
         Yes 
         Yes 
         
         
         OrientDB 
         Yes 
         Yes 
        
       
       
      
       
       
         
         ^ Joins do not necessarily apply to document databases, but MarkLogic can do joins using semantics.  
         ^ MongoDB did not support joining from a sharded collection until version 5.1.  
         ^ OrientDB can resolve 1:1 joins using links by storing direct links to foreign records.  
        
       
       
      See also 
      
       CAP theorem 
       Comparison of object database management systems 
       Comparison of structured storage software 
       C++ 
       Database scalability 
       Distributed cache 
       Faceted search 
       MultiValue database 
       Multi-model database 
       Triplestore 
       Schema-agnostic databases
       
      References 
      
       
        
        ^ http://nosql-database.org/ "NoSQL DEFINITION: Next Generation Databases mostly addressing some of the points&nbsp;: being non-relational, distributed, open-source and horizontally scalable".  
        ^ a b Leavitt, Neal (2010). "Will NoSQL Databases Live Up to Their Promise?" (PDF). IEEE Computer. 43 (2): 12–14. doi:10.1109/MC.2010.58. S2CID&nbsp;26876882.  
        ^ 
          Mohan, C. (2013). History Repeats Itself: Sensible and NonsenSQL Aspects of the NoSQL Hoopla (PDF). Proc. 16th Int'l Conf. on Extending Database Technology.  
        ^ 
          "Amazon Goes Back to the Future With 'NoSQL' Database". WIRED. 19 January 2012. Retrieved 6 March 2017.  
        ^ 
          "RDBMS dominate the database market, but NoSQL systems are catching up". DB-Engines.com. 21 November 2013. Retrieved 24 November 2013.  
        ^ 
          "NoSQL (Not Only SQL)". NoSQL database, also called Not Only SQL  
        ^ 
          Fowler, Martin. "NosqlDefinition". many advocates of NoSQL say that it does not mean a "no" to SQL, rather it means Not Only SQL  
        ^ NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley Educational Publishers Inc, 2009, 
          ISBN&nbsp;978-0321826626.  
        ^ 
          Vogels, Werner (18 January 2012). "Amazon DynamoDB – a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications". All Things Distributed. Retrieved 6 March 2017.  
        ^ 
          Grolinger, K.; Higashino, W. A.; Tiwari, A.; Capretz, M. A. M. (2013). "Data management in cloud environments: NoSQL and NewSQL data stores" (PDF). Aira, Springer. Retrieved 8 January 2014.  
        ^ 
          "Jepsen: MongoDB stale reads". Aphyr.com. 20 April 2015. Retrieved 6 March 2017.  
        ^ 
          "Large volume data analysis on the Typesafe Reactive Platform". Slideshare.net. Retrieved 6 March 2017.  
        ^ 
          Fowler, Adam. "10 NoSQL Misconceptions". Dummies.com. Retrieved 6 March 2017.  
        ^ 
          "No! to SQL and No! to NoSQL | So Many Oracle Manuals, So Little Time". Iggyfernandez.wordpress.com. Retrieved 6 March 2017.  
        ^ 
          Chapple, Mike. "The ACID Model". about.com.  
        ^ 
          Fiore, S. (2011). Grid and cloud database management. Springer Science &amp; Business Media. p.&nbsp;210.  
        ^ 
          Lawrence, Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB (2014). "Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB". International Conference on Computational Science and Computational Intelligence 1.  
        ^ 
          Lith, Adam; Mattson, Jakob (2010). "Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data" (PDF). Göteborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.&nbsp;70. Retrieved 12 May 2011. Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface  
        ^ 
          "NoSQL Relational Database Management System: Home Page". Strozzi.it. 2 October 2007. Retrieved 29 March 2010.  
        ^ 
          "NoSQL 2009". Blog.sym-link.com. 12 May 2009. Archived from the original on 16 July 2011. Retrieved 29 March 2010.  
        ^ 
          Strauch, Christof. "NoSQL Databases" (PDF). pp.&nbsp;23–24. Retrieved 27 August 2017.  
        ^ https://apacheignite.readme.io/docs Ignite Documentation  
        ^ https://www.infoworld.com/article/3135070/data-center/fire-up-big-data-processing-with-apache-ignite.html fire-up-big-data-processing-with-apache-ignite  
        ^ 
          Sandy (14 January 2011). "Key Value stores and the NoSQL movement". http://dba.stackexchange.com/questions/607/what-is-a-key-value-store-database: Stackexchange. Retrieved 1 January 2012. Key–value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered the value in the "key–value" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key-value store. This structure replaces the need for a fixed data model and allows proper formatting. }: External link in |location= (help)CS1 maint: location (link)  
        ^ 
          Seeger, Marc (21 September 2009). "Key-Value Stores: a practical overview" (PDF). Marc Seeger. Retrieved 1 January 2012. Key–value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key–value stores and their interface to the Ruby programming language.  
        ^ 
          Katsov, Ilya (1 March 2012). "NoSQL Data Modeling Techniques". Ilya Katsov. Retrieved 8 May 2014.  
        ^ 
          "TerminusX - Why TerminusX". terminusdb.com. Retrieved 16 December 2021.  
        ^ 
          Scofield, Ben (14 January 2010). "NoSQL - Death to Relational Databases(?)". Retrieved 26 June 2014.  
        ^  
          "Moving From Relational to NoSQL: How to Get Started". Couchbase.com. Retrieved 11 November 2019.  
        ^ 
          "Can't do joins with MarkLogic? It's just a matter of Semantics! - General Networks". Gennet.com. Archived from the original on 3 March 2017. Retrieved 6 March 2017.  
        ^ 
          "Sharded Collection Restrictions". docs.mongodb.com. Retrieved 24 January 2020.  
        ^ 
          "SQL Reference · OrientDB Manual". OrientDB.com. Retrieved 24 January 2020.  
       
       
      Further reading 
      
       
        Sadalage, Pramod; Fowler, Martin (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN&nbsp;978-0-321-82662-6. 
       
        McCreary, Dan; Kelly, Ann (2013). Making Sense of NoSQL: A guide for managers and the rest of us. ISBN&nbsp;9781617291074. 
       
        Wiese, Lena (2015). Advanced Data Management for SQL, NoSQL, Cloud and Distributed Databases. DeGruyter/Oldenbourg. ISBN&nbsp;978-3-11-044140-6. 
       
        Strauch, Christof (2012). "NoSQL Databases" (PDF). 
       
        Moniruzzaman, A. B.; Hossain, S. A. (2013). "NoSQL Database: New Era of Databases for Big data Analytics - Classification, Characteristics and Comparison". arXiv:1307.0191. Bibcode:2013arXiv1307.0191M. }: Cite journal requires |journal= (help) 
       
        Orend, Kai (2013). "Analysis and Classification of NoSQL Databases and Evaluation of their Ability to Replace an Object-relational Persistence Layer". CiteSeerX&nbsp;10.1.1.184.483. }: Cite journal requires |journal= (help) 
       
        Krishnan, Ganesh; Kulkarni, Sarang; Dadbhawala, Dharmesh Kirit. "Method and system for versioned sharing, consolidating and reporting information".
       
      External links 
      
       
        Strauch, Christoph. "NoSQL whitepaper" (PDF). Stuttgart: Hochschule der Medien. 
       
        Edlich, Stefan. "NoSQL database List". 
       
        Neubauer, Peter (2010). "Graph Databases, NOSQL and Neo4j". 
       
        Bushik, Sergey (2012). "A vendor-independent comparison of NoSQL databases: Cassandra, HBase, MongoDB, Riak". NetworkWorld. 
       
        Zicari, Roberto V. (2014). "NoSQL Data Stores – Articles, Papers, Presentations". odbms.org.
       
      
       
      
      
       
        
         
          
           
            
             v
             t
             e
            
           
           
            Database management systems
           
         
         
          Types
          
            
            
             Object-oriented 
              
               comparison
               
             Relational 
              
               list 
               comparison
               
             Key–value 
             Column-oriented 
              
               list
               
             Document-oriented 
             Wide-column store 
             Graph 
             NoSQL 
             NewSQL 
             In-memory 
              
               list
               
             Multi-model 
              
               comparison
               
             Cloud
             
           
         
         
          Concepts
          
            
            
             Database 
             ACID 
             Armstrong's axioms 
             Codd's 12 rules 
             CAP theorem 
             CRUD 
             Null 
             Candidate key 
             Foreign key 
             Superkey 
             Surrogate key 
             Unique key
             
           
         
         
          Objects
          
            
            
             Relation 
              
               table 
               column 
               row
               
             View 
             Transaction 
             Transaction log 
             Trigger 
             Index 
             Stored procedure 
             Cursor 
             Partition
             
           
         
         
          Components
          
            
            
             Concurrency control 
             Data dictionary 
             JDBC 
             XQJ 
             ODBC 
             Query language 
             Query optimizer 
             Query rewriting system 
             Query plan
             
           
         
         
          Functions
          
            
            
             Administration 
             Query optimization 
             Replication 
             Sharding
             
           
         
         
          Related topics
          
            
            
             Database models 
             Database normalization 
             Database storage 
             Distributed database 
             Federated database system 
             Referential integrity 
             Relational algebra 
             Relational calculus 
             Relational database 
             Relational model 
             Object–relational database 
             Transaction processing
             
           
         
         
          
            
            
              Category 
              Outline 
              WikiProject
             
           
         
        
       
          
     
     
      
      
     
      Retrieved from "https://en.wikipedia.org/w/index.php?title=NoSQL&amp;oldid=1070974970"
     
     
    
     
      Categories: 
      
       Database management systems
       NoSQL
       Data management
       Distributed data stores
       Structured storage
       Data analysis
      
     
     
      Hidden categories: 
      
       CS1 errors: external links
       CS1 maint: location
       Articles with short description
       Short description matches Wikidata
       Use dmy dates from December 2020
       CS1 errors: missing periodical
      
     
     
    
   
   
    
   
   
   Navigation menu 
    
     
      Personal tools  
      
      
       Not logged in
       Talk
       Contributions
       Create account
       Log in
       
      
     
     
      
       Namespaces  
       
       
        Article
        Talk
        
       
      
      
       
       Variants expanded collapsed  
       
        
       
      
     
     
      
       Views  
       
       
        Read
        Edit
        View history
        
       
      
      
       
       More expanded collapsed  
       
        
       
      
      
       
        Search  
        
         
          
          
          
          
         
        
       
      
     
    
    
      
     
     
      Navigation  
      
      
       Main page
       Contents
       Current events
       Random article
       About Wikipedia
       Contact us
       Donate
       
      
     
     
      Contribute  
      
      
       Help
       Learn to edit
       Community portal
       Recent changes
       Upload file
       
      
     
     
      Tools  
      
      
       What links here
       Related changes
       Upload file
       Special pages
       Permanent link
       Page information
       Cite this page
       Wikidata item
       
      
     
     
      Print/export  
      
      
       Download as PDF
       Printable version
       
      
     
     
      In other projects  
      
      
       Wikimedia Commons
       
      
     
     
      Languages  
      
      
       العربية
       Azərbaycanca
       Български
       Català
       Čeština
       Deutsch
       Eesti
       Español
       Esperanto
       Euskara
       فارسی
       Français
       한국어
       Bahasa Indonesia
       Íslenska
       Italiano
       עברית
       Latina
       Magyar
       മലയാളം
       Монгол
       Nederlands
       日本語
       Polski
       Português
       Русский
       Simple English
       Suomi
       Svenska
       தமிழ்
       Türkçe
       Українська
       اردو
       Tiếng Việt
       中文
       
      
       Edit links
       
      
     
    
   
   
    
     This page was last edited on 10 February 2022, at 07:03&nbsp;(UTC). 
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. 
    
    
    Privacy policy 
    About Wikipedia 
    Disclaimers 
    Contact Wikipedia 
    Mobile view 
    Developers 
    Statistics 
    Cookie statement 
    
    
     
     
    
   
   
   
    
 
